{"id":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","dependencies":[{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/package.json","includedInParent":true,"mtime":1679775809033},{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/node_modules/@cesium/engine/package.json","includedInParent":true,"mtime":1679775775888}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"/* Ellipsoid defines (set in Scene/VoxelEllipsoidShape.js)\\n\\\n#define ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MIN_DISCONTINUITY\\n\\\n#define ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MAX_DISCONTINUITY\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE_RANGE_EQUAL_ZERO\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE_MIN_MAX_REVERSED\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_LATITUDE\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_LATITUDE_RANGE_EQUAL_ZERO\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_MIN\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_FLAT\\n\\\n#define ELLIPSOID_IS_SPHERE\\n\\\n*/\\n\\\n\\n\\\nuniform vec3 u_ellipsoidRadiiUv; // [0,1]\\n\\\n#if !defined(ELLIPSOID_IS_SPHERE)\\n\\\n    uniform vec3 u_ellipsoidInverseRadiiSquaredUv;\\n\\\n#endif\\n\\\n#if defined(ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MIN_DISCONTINUITY) || defined(ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MAX_DISCONTINUITY) || defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE_MIN_MAX_REVERSED)\\n\\\n    uniform vec3 u_ellipsoidShapeUvLongitudeMinMaxMid;\\n\\\n#endif\\n\\\n#if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE)\\n\\\n    uniform vec2 u_ellipsoidUvToShapeUvLongitude; // x = scale, y = offset\\n\\\n#endif\\n\\\n#if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LATITUDE)\\n\\\n    uniform vec2 u_ellipsoidUvToShapeUvLatitude; // x = scale, y = offset\\n\\\n#endif\\n\\\n#if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_MIN) && !defined(ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_FLAT)\\n\\\n    uniform float u_ellipsoidInverseHeightDifferenceUv;\\n\\\n    uniform vec2 u_ellipseInnerRadiiUv; // [0,1]\\n\\\n#endif\\n\\\n\\n\\\n// robust iterative solution without trig functions\\n\\\n// https://github.com/0xfaded/ellipse_demo/issues/1\\n\\\n// https://stackoverflow.com/questions/22959698/distance-from-given-point-to-given-ellipse\\n\\\n// Pro: Good when radii.x ~= radii.y\\n\\\n// Con: Breaks at pos.x ~= 0.0, especially inside the ellipse\\n\\\n// Con: Inaccurate with exterior points and thin ellipses\\n\\\nfloat ellipseDistanceIterative (vec2 pos, vec2 radii) {\\n\\\n    vec2 p = abs(pos);\\n\\\n    vec2 invRadii = 1.0 / radii;\\n\\\n    vec2 a = vec2(1.0, -1.0) * (radii.x * radii.x - radii.y * radii.y) * invRadii;\\n\\\n    vec2 t = vec2(0.70710678118); // sqrt(2) / 2\\n\\\n    vec2 v = radii * t;\\n\\\n\\n\\\n    const int iterations = 3;\\n\\\n    for (int i = 0; i < iterations; ++i) {\\n\\\n        vec2 e = a * pow(t, vec2(3.0));\\n\\\n        vec2 q = normalize(p - e) * length(v - e);\\n\\\n        t = normalize((q + e) * invRadii);\\n\\\n        v = radii * t;\\n\\\n    }\\n\\\n    return length(v * sign(pos) - pos) * sign(p.y - v.y);\\n\\\n}\\n\\\n\\n\\\nvec3 convertUvToShapeUvSpace(in vec3 positionUv) {\\n\\\n    // Compute position and normal.\\n\\\n    // Convert positionUv [0,1] to local space [-1,+1] to \\\"normalized\\\" cartesian space [-a,+a] where a = (radii + height) / (max(radii) + height).\\n\\\n    // A point on the largest ellipsoid axis would be [-1,+1] and everything else would be smaller.\\n\\\n    vec3 positionLocal = positionUv * 2.0 - 1.0;\\n\\\n    #if defined(ELLIPSOID_IS_SPHERE)\\n\\\n        vec3 posEllipsoid = positionLocal * u_ellipsoidRadiiUv.x;\\n\\\n        vec3 normal = normalize(posEllipsoid);\\n\\\n    #else\\n\\\n        vec3 posEllipsoid = positionLocal * u_ellipsoidRadiiUv;\\n\\\n        vec3 normal = normalize(posEllipsoid * u_ellipsoidInverseRadiiSquaredUv); // geodetic surface normal\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute longitude\\n\\\n    #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE_RANGE_EQUAL_ZERO)\\n\\\n        float longitude = 1.0;\\n\\\n    #else\\n\\\n        float longitude = (atan(normal.y, normal.x) + czm_pi) / czm_twoPi;\\n\\\n\\n\\\n        // Correct the angle when max < min\\n\\\n        // Technically this should compare against min longitude - but it has precision problems so compare against the middle of empty space.\\n\\\n        #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE_MIN_MAX_REVERSED)\\n\\\n            longitude += float(longitude < u_ellipsoidShapeUvLongitudeMinMaxMid.z);\\n\\\n        #endif\\n\\\n\\n\\\n        // Avoid flickering from reading voxels from both sides of the -pi/+pi discontinuity.\\n\\\n        #if defined(ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MIN_DISCONTINUITY)\\n\\\n            longitude = longitude > u_ellipsoidShapeUvLongitudeMinMaxMid.z ? u_ellipsoidShapeUvLongitudeMinMaxMid.x : longitude;\\n\\\n        #endif\\n\\\n        #if defined(ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MAX_DISCONTINUITY)\\n\\\n            longitude = longitude < u_ellipsoidShapeUvLongitudeMinMaxMid.z ? u_ellipsoidShapeUvLongitudeMinMaxMid.y : longitude;\\n\\\n        #endif\\n\\\n\\n\\\n        #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE)\\n\\\n            longitude = longitude * u_ellipsoidUvToShapeUvLongitude.x + u_ellipsoidUvToShapeUvLongitude.y;\\n\\\n        #endif\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute latitude\\n\\\n    #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LATITUDE_RANGE_EQUAL_ZERO)\\n\\\n        float latitude = 1.0;\\n\\\n    #else\\n\\\n        float latitude = (asin(normal.z) + czm_piOverTwo) / czm_pi;\\n\\\n        #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LATITUDE)\\n\\\n            latitude = latitude * u_ellipsoidUvToShapeUvLatitude.x + u_ellipsoidUvToShapeUvLatitude.y;\\n\\\n        #endif\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute height\\n\\\n    #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_FLAT)\\n\\\n        // TODO: This breaks down when minBounds == maxBounds. To fix it, this\\n\\\n        // function would have to know if ray is intersecting the front or back of the shape\\n\\\n        // and set the shape space position to 1 (front) or 0 (back) accordingly.\\n\\\n        float height = 1.0;\\n\\\n    #else\\n\\\n        #if defined(ELLIPSOID_IS_SPHERE)\\n\\\n            #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_MIN)\\n\\\n                float height = (length(posEllipsoid) - u_ellipseInnerRadiiUv.x) * u_ellipsoidInverseHeightDifferenceUv;\\n\\\n            #else\\n\\\n                float height = length(posEllipsoid);\\n\\\n            #endif\\n\\\n        #else\\n\\\n            #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_MIN)\\n\\\n                // Convert the 3D position to a 2D position relative to the ellipse (radii.x, radii.z) (assuming radii.x == radii.y which is true for WGS84).\\n\\\n                // This is an optimization so that math can be done with ellipses instead of ellipsoids.\\n\\\n                vec2 posEllipse = vec2(length(posEllipsoid.xy), posEllipsoid.z);\\n\\\n                float height = ellipseDistanceIterative(posEllipse, u_ellipseInnerRadiiUv) * u_ellipsoidInverseHeightDifferenceUv;\\n\\\n            #else\\n\\\n                // TODO: this is probably not correct\\n\\\n                float height = length(posEllipsoid);\\n\\\n            #endif\\n\\\n        #endif\\n\\\n    #endif\\n\\\n\\n\\\n    return vec3(longitude, latitude, height);\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":4},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":1,"column":0},"name":"_default"},{"generated":{"line":8,"column":12},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":2,"column":15}},{"generated":{"line":9,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":4,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":5,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":7,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":8,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":9,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":10,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":11,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":12,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":13,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":14,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":15,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":16,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":17,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":18,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":19,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":20,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":21,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":22,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":23,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":24,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":25,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":26,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":27,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":28,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":29,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":30,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":31,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":32,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":33,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":34,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":35,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":36,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":37,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":38,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":39,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":40,"column":0}},{"generated":{"line":47,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":41,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":42,"column":0}},{"generated":{"line":49,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":43,"column":0}},{"generated":{"line":50,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":44,"column":0}},{"generated":{"line":51,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":45,"column":0}},{"generated":{"line":52,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":46,"column":0}},{"generated":{"line":53,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":47,"column":0}},{"generated":{"line":54,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":48,"column":0}},{"generated":{"line":55,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":49,"column":0}},{"generated":{"line":56,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":50,"column":0}},{"generated":{"line":57,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":51,"column":0}},{"generated":{"line":58,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":52,"column":0}},{"generated":{"line":59,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":53,"column":0}},{"generated":{"line":60,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":54,"column":0}},{"generated":{"line":61,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":55,"column":0}},{"generated":{"line":62,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":56,"column":0}},{"generated":{"line":63,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":57,"column":0}},{"generated":{"line":64,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":58,"column":0}},{"generated":{"line":65,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":59,"column":0}},{"generated":{"line":66,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":60,"column":0}},{"generated":{"line":67,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":61,"column":0}},{"generated":{"line":68,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":62,"column":0}},{"generated":{"line":69,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":63,"column":0}},{"generated":{"line":70,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":64,"column":0}},{"generated":{"line":71,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":65,"column":0}},{"generated":{"line":72,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":66,"column":0}},{"generated":{"line":73,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":67,"column":0}},{"generated":{"line":74,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":68,"column":0}},{"generated":{"line":75,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":69,"column":0}},{"generated":{"line":76,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":70,"column":0}},{"generated":{"line":77,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":71,"column":0}},{"generated":{"line":78,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":72,"column":0}},{"generated":{"line":79,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":73,"column":0}},{"generated":{"line":80,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":74,"column":0}},{"generated":{"line":81,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":75,"column":0}},{"generated":{"line":82,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":76,"column":0}},{"generated":{"line":83,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":77,"column":0}},{"generated":{"line":84,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":78,"column":0}},{"generated":{"line":85,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":79,"column":0}},{"generated":{"line":86,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":80,"column":0}},{"generated":{"line":87,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":81,"column":0}},{"generated":{"line":88,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":82,"column":0}},{"generated":{"line":89,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":83,"column":0}},{"generated":{"line":90,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":84,"column":0}},{"generated":{"line":91,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":85,"column":0}},{"generated":{"line":92,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":86,"column":0}},{"generated":{"line":93,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":87,"column":0}},{"generated":{"line":94,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":88,"column":0}},{"generated":{"line":95,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":89,"column":0}},{"generated":{"line":96,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":90,"column":0}},{"generated":{"line":97,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":91,"column":0}},{"generated":{"line":98,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":92,"column":0}},{"generated":{"line":99,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":93,"column":0}},{"generated":{"line":100,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":94,"column":0}},{"generated":{"line":101,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":95,"column":0}},{"generated":{"line":102,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":96,"column":0}},{"generated":{"line":103,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":97,"column":0}},{"generated":{"line":104,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":98,"column":0}},{"generated":{"line":105,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":99,"column":0}},{"generated":{"line":106,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":100,"column":0}},{"generated":{"line":107,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":101,"column":0}},{"generated":{"line":108,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":102,"column":0}},{"generated":{"line":109,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":103,"column":0}},{"generated":{"line":110,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":104,"column":0}},{"generated":{"line":111,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":105,"column":0}},{"generated":{"line":112,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":106,"column":0}},{"generated":{"line":113,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":107,"column":0}},{"generated":{"line":114,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":108,"column":0}},{"generated":{"line":115,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":109,"column":0}},{"generated":{"line":116,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":110,"column":0}},{"generated":{"line":117,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":111,"column":0}},{"generated":{"line":118,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":112,"column":0}},{"generated":{"line":119,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":113,"column":0}},{"generated":{"line":120,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":114,"column":0}},{"generated":{"line":121,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":115,"column":0}},{"generated":{"line":122,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":116,"column":0}},{"generated":{"line":123,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":117,"column":0}},{"generated":{"line":124,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":118,"column":0}},{"generated":{"line":125,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":119,"column":0}},{"generated":{"line":126,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":120,"column":0}},{"generated":{"line":127,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":121,"column":0}},{"generated":{"line":128,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":122,"column":0}},{"generated":{"line":129,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":123,"column":0}},{"generated":{"line":130,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":124,"column":0}},{"generated":{"line":131,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":125,"column":0}},{"generated":{"line":132,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":126,"column":0}},{"generated":{"line":133,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":127,"column":0}},{"generated":{"line":134,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":128,"column":0}},{"generated":{"line":135,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":129,"column":0}},{"generated":{"line":136,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":130,"column":0}},{"generated":{"line":137,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":131,"column":0}},{"generated":{"line":138,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":132,"column":0}},{"generated":{"line":138,"column":1},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":132,"column":1}},{"generated":{"line":139,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":132,"column":1},"name":"exports"},{"generated":{"line":139,"column":7},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":132,"column":1}},{"generated":{"line":139,"column":8},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":132,"column":1},"name":"default"},{"generated":{"line":139,"column":15},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":132,"column":1}},{"generated":{"line":139,"column":18},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":132,"column":1},"name":"_default"},{"generated":{"line":139,"column":26},"source":"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js","original":{"line":132,"column":1}}],"sources":{"node_modules/@cesium/engine/Source/Shaders/Voxels/convertUvToEllipsoid.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/* Ellipsoid defines (set in Scene/VoxelEllipsoidShape.js)\\n\\\n#define ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MIN_DISCONTINUITY\\n\\\n#define ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MAX_DISCONTINUITY\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE_RANGE_EQUAL_ZERO\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE_MIN_MAX_REVERSED\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_LATITUDE\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_LATITUDE_RANGE_EQUAL_ZERO\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_MIN\\n\\\n#define ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_FLAT\\n\\\n#define ELLIPSOID_IS_SPHERE\\n\\\n*/\\n\\\n\\n\\\nuniform vec3 u_ellipsoidRadiiUv; // [0,1]\\n\\\n#if !defined(ELLIPSOID_IS_SPHERE)\\n\\\n    uniform vec3 u_ellipsoidInverseRadiiSquaredUv;\\n\\\n#endif\\n\\\n#if defined(ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MIN_DISCONTINUITY) || defined(ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MAX_DISCONTINUITY) || defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE_MIN_MAX_REVERSED)\\n\\\n    uniform vec3 u_ellipsoidShapeUvLongitudeMinMaxMid;\\n\\\n#endif\\n\\\n#if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE)\\n\\\n    uniform vec2 u_ellipsoidUvToShapeUvLongitude; // x = scale, y = offset\\n\\\n#endif\\n\\\n#if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LATITUDE)\\n\\\n    uniform vec2 u_ellipsoidUvToShapeUvLatitude; // x = scale, y = offset\\n\\\n#endif\\n\\\n#if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_MIN) && !defined(ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_FLAT)\\n\\\n    uniform float u_ellipsoidInverseHeightDifferenceUv;\\n\\\n    uniform vec2 u_ellipseInnerRadiiUv; // [0,1]\\n\\\n#endif\\n\\\n\\n\\\n// robust iterative solution without trig functions\\n\\\n// https://github.com/0xfaded/ellipse_demo/issues/1\\n\\\n// https://stackoverflow.com/questions/22959698/distance-from-given-point-to-given-ellipse\\n\\\n// Pro: Good when radii.x ~= radii.y\\n\\\n// Con: Breaks at pos.x ~= 0.0, especially inside the ellipse\\n\\\n// Con: Inaccurate with exterior points and thin ellipses\\n\\\nfloat ellipseDistanceIterative (vec2 pos, vec2 radii) {\\n\\\n    vec2 p = abs(pos);\\n\\\n    vec2 invRadii = 1.0 / radii;\\n\\\n    vec2 a = vec2(1.0, -1.0) * (radii.x * radii.x - radii.y * radii.y) * invRadii;\\n\\\n    vec2 t = vec2(0.70710678118); // sqrt(2) / 2\\n\\\n    vec2 v = radii * t;\\n\\\n\\n\\\n    const int iterations = 3;\\n\\\n    for (int i = 0; i < iterations; ++i) {\\n\\\n        vec2 e = a * pow(t, vec2(3.0));\\n\\\n        vec2 q = normalize(p - e) * length(v - e);\\n\\\n        t = normalize((q + e) * invRadii);\\n\\\n        v = radii * t;\\n\\\n    }\\n\\\n    return length(v * sign(pos) - pos) * sign(p.y - v.y);\\n\\\n}\\n\\\n\\n\\\nvec3 convertUvToShapeUvSpace(in vec3 positionUv) {\\n\\\n    // Compute position and normal.\\n\\\n    // Convert positionUv [0,1] to local space [-1,+1] to \\\"normalized\\\" cartesian space [-a,+a] where a = (radii + height) / (max(radii) + height).\\n\\\n    // A point on the largest ellipsoid axis would be [-1,+1] and everything else would be smaller.\\n\\\n    vec3 positionLocal = positionUv * 2.0 - 1.0;\\n\\\n    #if defined(ELLIPSOID_IS_SPHERE)\\n\\\n        vec3 posEllipsoid = positionLocal * u_ellipsoidRadiiUv.x;\\n\\\n        vec3 normal = normalize(posEllipsoid);\\n\\\n    #else\\n\\\n        vec3 posEllipsoid = positionLocal * u_ellipsoidRadiiUv;\\n\\\n        vec3 normal = normalize(posEllipsoid * u_ellipsoidInverseRadiiSquaredUv); // geodetic surface normal\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute longitude\\n\\\n    #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE_RANGE_EQUAL_ZERO)\\n\\\n        float longitude = 1.0;\\n\\\n    #else\\n\\\n        float longitude = (atan(normal.y, normal.x) + czm_pi) / czm_twoPi;\\n\\\n\\n\\\n        // Correct the angle when max < min\\n\\\n        // Technically this should compare against min longitude - but it has precision problems so compare against the middle of empty space.\\n\\\n        #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE_MIN_MAX_REVERSED)\\n\\\n            longitude += float(longitude < u_ellipsoidShapeUvLongitudeMinMaxMid.z);\\n\\\n        #endif\\n\\\n\\n\\\n        // Avoid flickering from reading voxels from both sides of the -pi/+pi discontinuity.\\n\\\n        #if defined(ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MIN_DISCONTINUITY)\\n\\\n            longitude = longitude > u_ellipsoidShapeUvLongitudeMinMaxMid.z ? u_ellipsoidShapeUvLongitudeMinMaxMid.x : longitude;\\n\\\n        #endif\\n\\\n        #if defined(ELLIPSOID_HAS_RENDER_BOUNDS_LONGITUDE_MAX_DISCONTINUITY)\\n\\\n            longitude = longitude < u_ellipsoidShapeUvLongitudeMinMaxMid.z ? u_ellipsoidShapeUvLongitudeMinMaxMid.y : longitude;\\n\\\n        #endif\\n\\\n\\n\\\n        #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LONGITUDE)\\n\\\n            longitude = longitude * u_ellipsoidUvToShapeUvLongitude.x + u_ellipsoidUvToShapeUvLongitude.y;\\n\\\n        #endif\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute latitude\\n\\\n    #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LATITUDE_RANGE_EQUAL_ZERO)\\n\\\n        float latitude = 1.0;\\n\\\n    #else\\n\\\n        float latitude = (asin(normal.z) + czm_piOverTwo) / czm_pi;\\n\\\n        #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_LATITUDE)\\n\\\n            latitude = latitude * u_ellipsoidUvToShapeUvLatitude.x + u_ellipsoidUvToShapeUvLatitude.y;\\n\\\n        #endif\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute height\\n\\\n    #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_FLAT)\\n\\\n        // TODO: This breaks down when minBounds == maxBounds. To fix it, this\\n\\\n        // function would have to know if ray is intersecting the front or back of the shape\\n\\\n        // and set the shape space position to 1 (front) or 0 (back) accordingly.\\n\\\n        float height = 1.0;\\n\\\n    #else\\n\\\n        #if defined(ELLIPSOID_IS_SPHERE)\\n\\\n            #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_MIN)\\n\\\n                float height = (length(posEllipsoid) - u_ellipseInnerRadiiUv.x) * u_ellipsoidInverseHeightDifferenceUv;\\n\\\n            #else\\n\\\n                float height = length(posEllipsoid);\\n\\\n            #endif\\n\\\n        #else\\n\\\n            #if defined(ELLIPSOID_HAS_SHAPE_BOUNDS_HEIGHT_MIN)\\n\\\n                // Convert the 3D position to a 2D position relative to the ellipse (radii.x, radii.z) (assuming radii.x == radii.y which is true for WGS84).\\n\\\n                // This is an optimization so that math can be done with ellipses instead of ellipsoids.\\n\\\n                vec2 posEllipse = vec2(length(posEllipsoid.xy), posEllipsoid.z);\\n\\\n                float height = ellipseDistanceIterative(posEllipse, u_ellipseInnerRadiiUv) * u_ellipsoidInverseHeightDifferenceUv;\\n\\\n            #else\\n\\\n                // TODO: this is probably not correct\\n\\\n                float height = length(posEllipsoid);\\n\\\n            #endif\\n\\\n        #endif\\n\\\n    #endif\\n\\\n\\n\\\n    return vec3(longitude, latitude, height);\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"980eadd3972cc05efec02f142e82e4bf","cacheData":{"env":{}}}