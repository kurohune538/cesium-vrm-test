{"id":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","dependencies":[{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/package.json","includedInParent":true,"mtime":1679775809033},{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/node_modules/@cesium/engine/package.json","includedInParent":true,"mtime":1679775775888}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"float interpolateByDistance(vec4 nearFarScalar, float distance)\\n\\\n{\\n\\\n    float startDistance = nearFarScalar.x;\\n\\\n    float startValue = nearFarScalar.y;\\n\\\n    float endDistance = nearFarScalar.z;\\n\\\n    float endValue = nearFarScalar.w;\\n\\\n    float t = clamp((distance - startDistance) / (endDistance - startDistance), 0.0, 1.0);\\n\\\n    return mix(startValue, endValue, t);\\n\\\n}\\n\\\n\\n\\\nvec3 getLightDirection(vec3 positionWC)\\n\\\n{\\n\\\n    float lightEnum = u_radiiAndDynamicAtmosphereColor.z;\\n\\\n    vec3 lightDirection =\\n\\\n        positionWC * float(lightEnum == 0.0) +\\n\\\n        czm_lightDirectionWC * float(lightEnum == 1.0) +\\n\\\n        czm_sunDirectionWC * float(lightEnum == 2.0);\\n\\\n    return normalize(lightDirection);\\n\\\n}\\n\\\n\\n\\\nvoid computeAtmosphereScattering(vec3 positionWC, vec3 lightDirection, out vec3 rayleighColor, out vec3 mieColor, out float opacity, out float underTranslucentGlobe)\\n\\\n{\\n\\\n    float ellipsoidRadiiDifference = czm_ellipsoidRadii.x - czm_ellipsoidRadii.z;\\n\\\n\\n\\\n    // Adjustment to the atmosphere radius applied based on the camera height.\\n\\\n    float distanceAdjustMin = czm_ellipsoidRadii.x / 4.0;\\n\\\n    float distanceAdjustMax = czm_ellipsoidRadii.x;\\n\\\n    float distanceAdjustModifier = ellipsoidRadiiDifference / 2.0;\\n\\\n    float distanceAdjust = distanceAdjustModifier * clamp((czm_eyeHeight - distanceAdjustMin) / (distanceAdjustMax - distanceAdjustMin), 0.0, 1.0);\\n\\\n\\n\\\n    // Since atmosphere scattering assumes the atmosphere is a spherical shell, we compute an inner radius of the atmosphere best fit \\n\\\n    // for the position on the ellipsoid.\\n\\\n    float radiusAdjust = (ellipsoidRadiiDifference / 4.0) + distanceAdjust;\\n\\\n    float atmosphereInnerRadius = (length(czm_viewerPositionWC) - czm_eyeHeight) - radiusAdjust;\\n\\\n\\n\\\n    // Setup the primary ray: from the camera position to the vertex position.\\n\\\n    vec3 cameraToPositionWC = positionWC - czm_viewerPositionWC;\\n\\\n    vec3 cameraToPositionWCDirection = normalize(cameraToPositionWC);\\n\\\n    czm_ray primaryRay = czm_ray(czm_viewerPositionWC, cameraToPositionWCDirection);\\n\\\n\\n\\\n    underTranslucentGlobe = 0.0;\\n\\\n\\n\\\n    // Brighten the sky atmosphere under the Earth's atmosphere when translucency is enabled.\\n\\\n    #if defined(GLOBE_TRANSLUCENT)\\n\\\n\\n\\\n        // Check for intersection with the inner radius of the atmopshere.\\n\\\n        czm_raySegment primaryRayEarthIntersect = czm_raySphereIntersectionInterval(primaryRay, vec3(0.0), atmosphereInnerRadius + radiusAdjust);\\n\\\n        if (primaryRayEarthIntersect.start > 0.0 && primaryRayEarthIntersect.stop > 0.0) {\\n\\\n            \\n\\\n            // Compute position on globe.\\n\\\n            vec3 direction = normalize(positionWC);\\n\\\n            czm_ray ellipsoidRay = czm_ray(positionWC, -direction);\\n\\\n            czm_raySegment ellipsoidIntersection = czm_rayEllipsoidIntersectionInterval(ellipsoidRay, vec3(0.0), czm_ellipsoidInverseRadii);\\n\\\n            vec3 onEarth = positionWC - (direction * ellipsoidIntersection.start);\\n\\\n\\n\\\n            // Control the color using the camera angle.\\n\\\n            float angle = dot(normalize(czm_viewerPositionWC), normalize(onEarth));\\n\\\n\\n\\\n            // Control the opacity using the distance from Earth.\\n\\\n            opacity = interpolateByDistance(vec4(0.0, 1.0, czm_ellipsoidRadii.x, 0.0), length(czm_viewerPositionWC - onEarth));\\n\\\n            vec3 horizonColor = vec3(0.1, 0.2, 0.3);\\n\\\n            vec3 nearColor = vec3(0.0);\\n\\\n\\n\\\n            rayleighColor = mix(nearColor, horizonColor, exp(-angle) * opacity);\\n\\\n            \\n\\\n            // Set the traslucent flag to avoid alpha adjustment in computeFinalColor funciton.\\n\\\n            underTranslucentGlobe = 1.0;\\n\\\n            return;\\n\\\n        }\\n\\\n    #endif\\n\\\n\\n\\\n    computeScattering(\\n\\\n        primaryRay,\\n\\\n        length(cameraToPositionWC),\\n\\\n        lightDirection,\\n\\\n        atmosphereInnerRadius,\\n\\\n        rayleighColor,\\n\\\n        mieColor,\\n\\\n        opacity\\n\\\n    );\\n\\\n\\n\\\n    // Alter the opacity based on how close the viewer is to the ground.\\n\\\n    // (0.0 = At edge of atmosphere, 1.0 = On ground)\\n\\\n    float cameraHeight = czm_eyeHeight + atmosphereInnerRadius;\\n\\\n    float atmosphereOuterRadius = atmosphereInnerRadius + ATMOSPHERE_THICKNESS;\\n\\\n    opacity = clamp((atmosphereOuterRadius - cameraHeight) / (atmosphereOuterRadius - atmosphereInnerRadius), 0.0, 1.0);\\n\\\n\\n\\\n    // Alter alpha based on time of day (0.0 = night , 1.0 = day)\\n\\\n    float nightAlpha = (u_radiiAndDynamicAtmosphereColor.z != 0.0) ? clamp(dot(normalize(positionWC), lightDirection), 0.0, 1.0) : 1.0;\\n\\\n    opacity *= pow(nightAlpha, 0.5);\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":4},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":1,"column":0},"name":"_default"},{"generated":{"line":8,"column":12},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":2,"column":15}},{"generated":{"line":9,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":4,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":5,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":7,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":8,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":9,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":10,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":11,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":12,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":13,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":14,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":15,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":16,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":17,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":18,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":19,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":20,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":21,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":22,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":23,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":24,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":25,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":26,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":27,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":28,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":29,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":30,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":31,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":32,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":33,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":34,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":35,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":36,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":37,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":38,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":39,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":40,"column":0}},{"generated":{"line":47,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":41,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":42,"column":0}},{"generated":{"line":49,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":43,"column":0}},{"generated":{"line":50,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":44,"column":0}},{"generated":{"line":51,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":45,"column":0}},{"generated":{"line":52,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":46,"column":0}},{"generated":{"line":53,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":47,"column":0}},{"generated":{"line":54,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":48,"column":0}},{"generated":{"line":55,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":49,"column":0}},{"generated":{"line":56,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":50,"column":0}},{"generated":{"line":57,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":51,"column":0}},{"generated":{"line":58,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":52,"column":0}},{"generated":{"line":59,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":53,"column":0}},{"generated":{"line":60,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":54,"column":0}},{"generated":{"line":61,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":55,"column":0}},{"generated":{"line":62,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":56,"column":0}},{"generated":{"line":63,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":57,"column":0}},{"generated":{"line":64,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":58,"column":0}},{"generated":{"line":65,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":59,"column":0}},{"generated":{"line":66,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":60,"column":0}},{"generated":{"line":67,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":61,"column":0}},{"generated":{"line":68,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":62,"column":0}},{"generated":{"line":69,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":63,"column":0}},{"generated":{"line":70,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":64,"column":0}},{"generated":{"line":71,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":65,"column":0}},{"generated":{"line":72,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":66,"column":0}},{"generated":{"line":73,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":67,"column":0}},{"generated":{"line":74,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":68,"column":0}},{"generated":{"line":75,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":69,"column":0}},{"generated":{"line":76,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":70,"column":0}},{"generated":{"line":77,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":71,"column":0}},{"generated":{"line":78,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":72,"column":0}},{"generated":{"line":79,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":73,"column":0}},{"generated":{"line":80,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":74,"column":0}},{"generated":{"line":81,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":75,"column":0}},{"generated":{"line":82,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":76,"column":0}},{"generated":{"line":83,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":77,"column":0}},{"generated":{"line":84,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":78,"column":0}},{"generated":{"line":85,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":79,"column":0}},{"generated":{"line":86,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":80,"column":0}},{"generated":{"line":87,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":81,"column":0}},{"generated":{"line":88,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":82,"column":0}},{"generated":{"line":89,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":83,"column":0}},{"generated":{"line":90,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":84,"column":0}},{"generated":{"line":91,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":85,"column":0}},{"generated":{"line":92,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":86,"column":0}},{"generated":{"line":93,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":87,"column":0}},{"generated":{"line":94,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":88,"column":0}},{"generated":{"line":95,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":89,"column":0}},{"generated":{"line":96,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":90,"column":0}},{"generated":{"line":97,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":91,"column":0}},{"generated":{"line":98,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":92,"column":0}},{"generated":{"line":99,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":93,"column":0}},{"generated":{"line":99,"column":1},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":93,"column":1}},{"generated":{"line":100,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":93,"column":1},"name":"exports"},{"generated":{"line":100,"column":7},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":93,"column":1}},{"generated":{"line":100,"column":8},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":93,"column":1},"name":"default"},{"generated":{"line":100,"column":15},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":93,"column":1}},{"generated":{"line":100,"column":18},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":93,"column":1},"name":"_default"},{"generated":{"line":100,"column":26},"source":"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js","original":{"line":93,"column":1}}],"sources":{"node_modules/@cesium/engine/Source/Shaders/SkyAtmosphereCommon.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"float interpolateByDistance(vec4 nearFarScalar, float distance)\\n\\\n{\\n\\\n    float startDistance = nearFarScalar.x;\\n\\\n    float startValue = nearFarScalar.y;\\n\\\n    float endDistance = nearFarScalar.z;\\n\\\n    float endValue = nearFarScalar.w;\\n\\\n    float t = clamp((distance - startDistance) / (endDistance - startDistance), 0.0, 1.0);\\n\\\n    return mix(startValue, endValue, t);\\n\\\n}\\n\\\n\\n\\\nvec3 getLightDirection(vec3 positionWC)\\n\\\n{\\n\\\n    float lightEnum = u_radiiAndDynamicAtmosphereColor.z;\\n\\\n    vec3 lightDirection =\\n\\\n        positionWC * float(lightEnum == 0.0) +\\n\\\n        czm_lightDirectionWC * float(lightEnum == 1.0) +\\n\\\n        czm_sunDirectionWC * float(lightEnum == 2.0);\\n\\\n    return normalize(lightDirection);\\n\\\n}\\n\\\n\\n\\\nvoid computeAtmosphereScattering(vec3 positionWC, vec3 lightDirection, out vec3 rayleighColor, out vec3 mieColor, out float opacity, out float underTranslucentGlobe)\\n\\\n{\\n\\\n    float ellipsoidRadiiDifference = czm_ellipsoidRadii.x - czm_ellipsoidRadii.z;\\n\\\n\\n\\\n    // Adjustment to the atmosphere radius applied based on the camera height.\\n\\\n    float distanceAdjustMin = czm_ellipsoidRadii.x / 4.0;\\n\\\n    float distanceAdjustMax = czm_ellipsoidRadii.x;\\n\\\n    float distanceAdjustModifier = ellipsoidRadiiDifference / 2.0;\\n\\\n    float distanceAdjust = distanceAdjustModifier * clamp((czm_eyeHeight - distanceAdjustMin) / (distanceAdjustMax - distanceAdjustMin), 0.0, 1.0);\\n\\\n\\n\\\n    // Since atmosphere scattering assumes the atmosphere is a spherical shell, we compute an inner radius of the atmosphere best fit \\n\\\n    // for the position on the ellipsoid.\\n\\\n    float radiusAdjust = (ellipsoidRadiiDifference / 4.0) + distanceAdjust;\\n\\\n    float atmosphereInnerRadius = (length(czm_viewerPositionWC) - czm_eyeHeight) - radiusAdjust;\\n\\\n\\n\\\n    // Setup the primary ray: from the camera position to the vertex position.\\n\\\n    vec3 cameraToPositionWC = positionWC - czm_viewerPositionWC;\\n\\\n    vec3 cameraToPositionWCDirection = normalize(cameraToPositionWC);\\n\\\n    czm_ray primaryRay = czm_ray(czm_viewerPositionWC, cameraToPositionWCDirection);\\n\\\n\\n\\\n    underTranslucentGlobe = 0.0;\\n\\\n\\n\\\n    // Brighten the sky atmosphere under the Earth's atmosphere when translucency is enabled.\\n\\\n    #if defined(GLOBE_TRANSLUCENT)\\n\\\n\\n\\\n        // Check for intersection with the inner radius of the atmopshere.\\n\\\n        czm_raySegment primaryRayEarthIntersect = czm_raySphereIntersectionInterval(primaryRay, vec3(0.0), atmosphereInnerRadius + radiusAdjust);\\n\\\n        if (primaryRayEarthIntersect.start > 0.0 && primaryRayEarthIntersect.stop > 0.0) {\\n\\\n            \\n\\\n            // Compute position on globe.\\n\\\n            vec3 direction = normalize(positionWC);\\n\\\n            czm_ray ellipsoidRay = czm_ray(positionWC, -direction);\\n\\\n            czm_raySegment ellipsoidIntersection = czm_rayEllipsoidIntersectionInterval(ellipsoidRay, vec3(0.0), czm_ellipsoidInverseRadii);\\n\\\n            vec3 onEarth = positionWC - (direction * ellipsoidIntersection.start);\\n\\\n\\n\\\n            // Control the color using the camera angle.\\n\\\n            float angle = dot(normalize(czm_viewerPositionWC), normalize(onEarth));\\n\\\n\\n\\\n            // Control the opacity using the distance from Earth.\\n\\\n            opacity = interpolateByDistance(vec4(0.0, 1.0, czm_ellipsoidRadii.x, 0.0), length(czm_viewerPositionWC - onEarth));\\n\\\n            vec3 horizonColor = vec3(0.1, 0.2, 0.3);\\n\\\n            vec3 nearColor = vec3(0.0);\\n\\\n\\n\\\n            rayleighColor = mix(nearColor, horizonColor, exp(-angle) * opacity);\\n\\\n            \\n\\\n            // Set the traslucent flag to avoid alpha adjustment in computeFinalColor funciton.\\n\\\n            underTranslucentGlobe = 1.0;\\n\\\n            return;\\n\\\n        }\\n\\\n    #endif\\n\\\n\\n\\\n    computeScattering(\\n\\\n        primaryRay,\\n\\\n        length(cameraToPositionWC),\\n\\\n        lightDirection,\\n\\\n        atmosphereInnerRadius,\\n\\\n        rayleighColor,\\n\\\n        mieColor,\\n\\\n        opacity\\n\\\n    );\\n\\\n\\n\\\n    // Alter the opacity based on how close the viewer is to the ground.\\n\\\n    // (0.0 = At edge of atmosphere, 1.0 = On ground)\\n\\\n    float cameraHeight = czm_eyeHeight + atmosphereInnerRadius;\\n\\\n    float atmosphereOuterRadius = atmosphereInnerRadius + ATMOSPHERE_THICKNESS;\\n\\\n    opacity = clamp((atmosphereOuterRadius - cameraHeight) / (atmosphereOuterRadius - atmosphereInnerRadius), 0.0, 1.0);\\n\\\n\\n\\\n    // Alter alpha based on time of day (0.0 = night , 1.0 = day)\\n\\\n    float nightAlpha = (u_radiiAndDynamicAtmosphereColor.z != 0.0) ? clamp(dot(normalize(positionWC), lightDirection), 0.0, 1.0) : 1.0;\\n\\\n    opacity *= pow(nightAlpha, 0.5);\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"c768d2955311b0580de6011bb10c041f","cacheData":{"env":{}}}