{"id":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","dependencies":[{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/package.json","includedInParent":true,"mtime":1679775809033},{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/node_modules/@cesium/engine/package.json","includedInParent":true,"mtime":1679775775888}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"uniform sampler2D u_noiseTexture;\\n\\\nuniform vec3 u_noiseTextureDimensions;\\n\\\nuniform float u_noiseDetail;\\n\\\nin vec2 v_offset;\\n\\\nin vec3 v_maximumSize;\\n\\\nin vec4 v_color;\\n\\\nin float v_slice;\\n\\\nin float v_brightness;\\n\\\n\\n\\\nfloat wrap(float value, float rangeLength) {\\n\\\n    if(value < 0.0) {\\n\\\n        float absValue = abs(value);\\n\\\n        float modValue = mod(absValue, rangeLength);\\n\\\n        return mod(rangeLength - modValue, rangeLength);\\n\\\n    }\\n\\\n    return mod(value, rangeLength);\\n\\\n}\\n\\\n\\n\\\nvec3 wrapVec(vec3 value, float rangeLength) {\\n\\\n    return vec3(wrap(value.x, rangeLength),\\n\\\n                wrap(value.y, rangeLength),\\n\\\n                wrap(value.z, rangeLength));\\n\\\n}\\n\\\n\\n\\\nvec2 voxelToUV(vec3 voxelIndex) {\\n\\\n    float textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\n    float noiseTextureRows = u_noiseTextureDimensions.y;\\n\\\n    float inverseNoiseTextureRows = u_noiseTextureDimensions.z;\\n\\\n\\n\\\n    float textureSliceWidthSquared = textureSliceWidth * textureSliceWidth;\\n\\\n    vec2 inverseNoiseTextureDimensions = vec2(noiseTextureRows / textureSliceWidthSquared,\\n\\\n                                            inverseNoiseTextureRows / textureSliceWidth);\\n\\\n    vec3 wrappedIndex = wrapVec(voxelIndex, textureSliceWidth);\\n\\\n    float column = mod(wrappedIndex.z, textureSliceWidth * inverseNoiseTextureRows);\\n\\\n    float row = floor(wrappedIndex.z / textureSliceWidth * noiseTextureRows);\\n\\\n\\n\\\n    float xPixelCoord = wrappedIndex.x + column * textureSliceWidth;\\n\\\n    float yPixelCoord = wrappedIndex.y + row * textureSliceWidth;\\n\\\n    return vec2(xPixelCoord, yPixelCoord) * inverseNoiseTextureDimensions;\\n\\\n}\\n\\\n\\n\\\n// Interpolate a voxel with its neighbor (along the positive X-axis)\\n\\\nvec4 lerpSamplesX(vec3 voxelIndex, float x) {\\n\\\n    vec2 uv0 = voxelToUV(voxelIndex);\\n\\\n    vec2 uv1 = voxelToUV(voxelIndex + vec3(1.0, 0.0, 0.0));\\n\\\n    vec4 sample0 = texture(u_noiseTexture, uv0);\\n\\\n    vec4 sample1 = texture(u_noiseTexture, uv1);\\n\\\n    return mix(sample0, sample1, x);\\n\\\n}\\n\\\n\\n\\\nvec4 sampleNoiseTexture(vec3 position) {\\n\\\n    float textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\n    vec3 recenteredPos = position + vec3(textureSliceWidth / 2.0);\\n\\\n    vec3 lerpValue = fract(recenteredPos);\\n\\\n    vec3 voxelIndex = floor(recenteredPos);\\n\\\n\\n\\\n    vec4 xLerp00 = lerpSamplesX(voxelIndex, lerpValue.x);\\n\\\n    vec4 xLerp01 = lerpSamplesX(voxelIndex + vec3(0.0, 0.0, 1.0), lerpValue.x);\\n\\\n    vec4 xLerp10 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 0.0), lerpValue.x);\\n\\\n    vec4 xLerp11 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 1.0), lerpValue.x);\\n\\\n\\n\\\n    vec4 yLerp0 = mix(xLerp00, xLerp10, lerpValue.y);\\n\\\n    vec4 yLerp1 = mix(xLerp01, xLerp11, lerpValue.y);\\n\\\n    return mix(yLerp0, yLerp1, lerpValue.z);\\n\\\n}\\n\\\n\\n\\\n// Intersection with a unit sphere with radius 0.5 at center (0, 0, 0).\\n\\\nbool intersectSphere(vec3 origin, vec3 dir, float slice,\\n\\\n                     out vec3 point, out vec3 normal) {\\n\\\n    float A = dot(dir, dir);\\n\\\n    float B = dot(origin, dir);\\n\\\n    float C = dot(origin, origin) - 0.25;\\n\\\n    float discriminant = (B * B) - (A * C);\\n\\\n    if(discriminant < 0.0) {\\n\\\n        return false;\\n\\\n    }\\n\\\n    float root = sqrt(discriminant);\\n\\\n    float t = (-B - root) / A;\\n\\\n    if(t < 0.0) {\\n\\\n        t = (-B + root) / A;\\n\\\n    }\\n\\\n    point = origin + t * dir;\\n\\\n\\n\\\n    if(slice >= 0.0) {\\n\\\n        point.z = (slice / 2.0) - 0.5;\\n\\\n        if(length(point) > 0.5) {\\n\\\n            return false;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    normal = normalize(point);\\n\\\n    point -= czm_epsilon2 * normal;\\n\\\n    return true;\\n\\\n}\\n\\\n\\n\\\n// Transforms the ray origin and direction into unit sphere space,\\n\\\n// then transforms the result back into the ellipsoid's space.\\n\\\nbool intersectEllipsoid(vec3 origin, vec3 dir, vec3 center, vec3 scale, float slice,\\n\\\n                        out vec3 point, out vec3 normal) {\\n\\\n    if(scale.x <= 0.01 || scale.y < 0.01 || scale.z < 0.01) {\\n\\\n        return false;\\n\\\n    }\\n\\\n\\n\\\n    vec3 o = (origin - center) / scale;\\n\\\n    vec3 d = dir / scale;\\n\\\n    vec3 p, n;\\n\\\n    bool intersected = intersectSphere(o, d, slice, p, n);\\n\\\n    if(intersected) {\\n\\\n        point = (p * scale) + center;\\n\\\n        normal = n;\\n\\\n    }\\n\\\n    return intersected;\\n\\\n}\\n\\\n\\n\\\n// Assume that if phase shift is being called for octave i,\\n\\\n// the frequency is of i - 1. This saves us from doing extra\\n\\\n// division / multiplication operations.\\n\\\nvec2 phaseShift2D(vec2 p, vec2 freq) {\\n\\\n    return (czm_pi / 2.0) * sin(freq.yx * p.yx);\\n\\\n}\\n\\\n\\n\\\nvec2 phaseShift3D(vec3 p, vec2 freq) {\\n\\\n    return phaseShift2D(p.xy, freq) + czm_pi * vec2(sin(freq.x * p.z));\\n\\\n}\\n\\\n\\n\\\n// The cloud texture function derived from Gardner's 1985 paper,\\n\\\n// \\\"Visual Simulation of Clouds.\\\"\\n\\\n// https://www.cs.drexel.edu/~david/Classes/Papers/p297-gardner.pdf\\n\\\nconst float T0    = 0.6;  // contrast of the texture pattern\\n\\\nconst float k     = 0.1;  // computed to produce a maximum value of 1\\n\\\nconst float C0    = 0.8;  // coefficient\\n\\\nconst float FX0   = 0.6;  // frequency X\\n\\\nconst float FY0   = 0.6;  // frequency Y\\n\\\nconst int octaves = 5;\\n\\\n\\n\\\nfloat T(vec3 point) {\\n\\\n    vec2 sum = vec2(0.0);\\n\\\n    float Ci = C0;\\n\\\n    vec2 FXY = vec2(FX0, FY0);\\n\\\n    vec2 PXY = vec2(0.0);\\n\\\n    for(int i = 1; i <= octaves; i++) {\\n\\\n        PXY = phaseShift3D(point, FXY);\\n\\\n        Ci *= 0.707;\\n\\\n        FXY *= 2.0;\\n\\\n        vec2 sinTerm = sin(FXY * point.xy + PXY);\\n\\\n        sum += Ci * sinTerm + vec2(T0);\\n\\\n    }\\n\\\n    return k * sum.x * sum.y;\\n\\\n}\\n\\\n\\n\\\nconst float a = 0.5;  // fraction of surface reflection due to ambient or scattered light,\\n\\\nconst float t = 0.4;  // fraction of texture shading\\n\\\nconst float s = 0.25; // fraction of specular reflection\\n\\\n\\n\\\nfloat I(float Id, float Is, float It) {\\n\\\n    return (1.0 - a) * ((1.0 - t) * ((1.0 - s) * Id + s * Is) + t * It) + a;\\n\\\n}\\n\\\n\\n\\\nconst vec3 lightDir = normalize(vec3(0.2, -1.0, 0.7));\\n\\\n\\n\\\nvec4 drawCloud(vec3 rayOrigin, vec3 rayDir, vec3 cloudCenter, vec3 cloudScale, float cloudSlice,\\n\\\n               float brightness) {\\n\\\n    vec3 cloudPoint, cloudNormal;\\n\\\n    if(!intersectEllipsoid(rayOrigin, rayDir, cloudCenter, cloudScale, cloudSlice,\\n\\\n                            cloudPoint, cloudNormal)) {\\n\\\n        return vec4(0.0);\\n\\\n    }\\n\\\n\\n\\\n    float Id = clamp(dot(cloudNormal, -lightDir), 0.0, 1.0);  // diffuse reflection\\n\\\n    float Is = max(pow(dot(-lightDir, -rayDir), 2.0), 0.0);   // specular reflection\\n\\\n    float It = T(cloudPoint);                                 // texture function\\n\\\n    float intensity = I(Id, Is, It);\\n\\\n    vec3 color = vec3(intensity * clamp(brightness, 0.1, 1.0));\\n\\\n\\n\\\n    vec4 noise = sampleNoiseTexture(u_noiseDetail * cloudPoint);\\n\\\n    float W = noise.x;\\n\\\n    float W2 = noise.y;\\n\\\n    float W3 = noise.z;\\n\\\n\\n\\\n    // The dot product between the cloud's normal and the ray's direction is greatest\\n\\\n    // in the center of the ellipsoid's surface. It decreases towards the edge.\\n\\\n    // Thus, it is used to blur the areas leading to the edges of the ellipsoid,\\n\\\n    // so that no harsh lines appear.\\n\\\n\\n\\\n    // The first (and biggest) layer of worley noise is then subtracted from this.\\n\\\n    // The final result is scaled up so that the base cloud is not too translucent.\\n\\\n    float ndDot = clamp(dot(cloudNormal, -rayDir), 0.0, 1.0);\\n\\\n    float TR = pow(ndDot, 3.0) - W; // translucency\\n\\\n    TR *= 1.3;\\n\\\n\\n\\\n    // Subtracting the second and third layers of worley noise is more complicated.\\n\\\n    // If these layers of noise were simply subtracted from the current translucency,\\n\\\n    // the shape derived from the first layer of noise would be completely deleted.\\n\\\n    // The erosion of this noise should thus be constricted to the edges of the cloud.\\n\\\n    // However, because the edges of the ellipsoid were already blurred away, mapping\\n\\\n    // the noise to (1.0 - ndDot) will have no impact on most of the cloud's appearance.\\n\\\n    // The value of (0.5 - ndDot) provides the best compromise.\\n\\\n    float minusDot = 0.5 - ndDot;\\n\\\n\\n\\\n    // Even with the previous calculation, subtracting the second layer of wnoise\\n\\\n    // erode too much of the cloud. The addition of it, however, will detailed\\n\\\n    // volume to the cloud. As long as the noise is only added and not subtracted,\\n\\\n    // the results are aesthetically pleasing.\\n\\\n\\n\\\n    // The minusDot product is mapped in a way that it is larger at the edges of\\n\\\n    // the ellipsoid, so a subtraction and min operation are used instead of\\n\\\n    // an addition and max one.\\n\\\n    TR -= min(minusDot * W2, 0.0);\\n\\\n\\n\\\n    // The third level of worley noise is subtracted from the result, with some\\n\\\n    // modifications. First, a scalar is added to minusDot so that the noise\\n\\\n    // starts affecting the shape farther away from the center of the ellipsoid's\\n\\\n    // surface. Then, it is scaled down so its impact is not too intense.\\n\\\n    TR -= 0.8 * (minusDot + 0.25) * W3;\\n\\\n\\n\\\n    // The texture function's shading does not correlate with the shape of the cloud\\n\\\n    // produced by the layers of noise, so an extra shading scalar is calculated.\\n\\\n    // The darkest areas of the cloud are assigned to be where the noise erodes\\n\\\n    // the cloud the most. This is then interpolated based on the translucency\\n\\\n    // and the diffuse shading term of that point in the cloud.\\n\\\n    float shading = mix(1.0 - 0.8 * W * W, 1.0, Id * TR);\\n\\\n\\n\\\n    // To avoid values that are too dark, this scalar is increased by a small amount\\n\\\n    // and clamped so it never goes to zero.\\n\\\n    shading = clamp(shading + 0.2, 0.3, 1.0);\\n\\\n\\n\\\n    // Finally, the contrast of the cloud's color is increased.\\n\\\n    vec3 finalColor = mix(vec3(0.5), shading * color, 1.15);\\n\\\n    return vec4(finalColor, clamp(TR, 0.0, 1.0)) * v_color;\\n\\\n}\\n\\\n\\n\\\nvoid main() {\\n\\\n#ifdef DEBUG_BILLBOARDS\\n\\\n    out_FragColor = vec4(0.0, 0.5, 0.5, 1.0);\\n\\\n#endif\\n\\\n    // To avoid calculations with high values,\\n\\\n    // we raycast from an arbitrarily smaller space.\\n\\\n    vec2 coordinate = v_maximumSize.xy * v_offset;\\n\\\n\\n\\\n    vec3 ellipsoidScale = 0.82 * v_maximumSize;\\n\\\n    vec3 ellipsoidCenter = vec3(0.0);\\n\\\n\\n\\\n    float zOffset = max(ellipsoidScale.z - 10.0, 0.0);\\n\\\n    vec3 eye = vec3(0, 0, -10.0 - zOffset);\\n\\\n    vec3 rayDir = normalize(vec3(coordinate, 1.0) - eye);\\n\\\n    vec3 rayOrigin = eye;\\n\\\n#ifdef DEBUG_ELLIPSOIDS\\n\\\n    vec3 point, normal;\\n\\\n    if(intersectEllipsoid(rayOrigin, rayDir, ellipsoidCenter, ellipsoidScale, v_slice,\\n\\\n                          point, normal)) {\\n\\\n        out_FragColor = v_brightness * v_color;\\n\\\n    }\\n\\\n#else\\n\\\n#ifndef DEBUG_BILLBOARDS\\n\\\n    vec4 cloud = drawCloud(rayOrigin, rayDir,\\n\\\n                           ellipsoidCenter, ellipsoidScale, v_slice, v_brightness);\\n\\\n    if(cloud.w < 0.01) {\\n\\\n        discard;\\n\\\n    }\\n\\\n    out_FragColor = cloud;\\n\\\n#endif\\n\\\n#endif\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":4},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":1,"column":0},"name":"_default"},{"generated":{"line":8,"column":12},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":2,"column":15}},{"generated":{"line":9,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":4,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":5,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":7,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":8,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":9,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":10,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":11,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":12,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":13,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":14,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":15,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":16,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":17,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":18,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":19,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":20,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":21,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":22,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":23,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":24,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":25,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":26,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":27,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":28,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":29,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":30,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":31,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":32,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":33,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":34,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":35,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":36,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":37,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":38,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":39,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":40,"column":0}},{"generated":{"line":47,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":41,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":42,"column":0}},{"generated":{"line":49,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":43,"column":0}},{"generated":{"line":50,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":44,"column":0}},{"generated":{"line":51,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":45,"column":0}},{"generated":{"line":52,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":46,"column":0}},{"generated":{"line":53,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":47,"column":0}},{"generated":{"line":54,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":48,"column":0}},{"generated":{"line":55,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":49,"column":0}},{"generated":{"line":56,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":50,"column":0}},{"generated":{"line":57,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":51,"column":0}},{"generated":{"line":58,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":52,"column":0}},{"generated":{"line":59,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":53,"column":0}},{"generated":{"line":60,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":54,"column":0}},{"generated":{"line":61,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":55,"column":0}},{"generated":{"line":62,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":56,"column":0}},{"generated":{"line":63,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":57,"column":0}},{"generated":{"line":64,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":58,"column":0}},{"generated":{"line":65,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":59,"column":0}},{"generated":{"line":66,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":60,"column":0}},{"generated":{"line":67,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":61,"column":0}},{"generated":{"line":68,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":62,"column":0}},{"generated":{"line":69,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":63,"column":0}},{"generated":{"line":70,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":64,"column":0}},{"generated":{"line":71,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":65,"column":0}},{"generated":{"line":72,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":66,"column":0}},{"generated":{"line":73,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":67,"column":0}},{"generated":{"line":74,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":68,"column":0}},{"generated":{"line":75,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":69,"column":0}},{"generated":{"line":76,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":70,"column":0}},{"generated":{"line":77,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":71,"column":0}},{"generated":{"line":78,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":72,"column":0}},{"generated":{"line":79,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":73,"column":0}},{"generated":{"line":80,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":74,"column":0}},{"generated":{"line":81,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":75,"column":0}},{"generated":{"line":82,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":76,"column":0}},{"generated":{"line":83,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":77,"column":0}},{"generated":{"line":84,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":78,"column":0}},{"generated":{"line":85,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":79,"column":0}},{"generated":{"line":86,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":80,"column":0}},{"generated":{"line":87,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":81,"column":0}},{"generated":{"line":88,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":82,"column":0}},{"generated":{"line":89,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":83,"column":0}},{"generated":{"line":90,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":84,"column":0}},{"generated":{"line":91,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":85,"column":0}},{"generated":{"line":92,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":86,"column":0}},{"generated":{"line":93,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":87,"column":0}},{"generated":{"line":94,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":88,"column":0}},{"generated":{"line":95,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":89,"column":0}},{"generated":{"line":96,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":90,"column":0}},{"generated":{"line":97,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":91,"column":0}},{"generated":{"line":98,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":92,"column":0}},{"generated":{"line":99,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":93,"column":0}},{"generated":{"line":100,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":94,"column":0}},{"generated":{"line":101,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":95,"column":0}},{"generated":{"line":102,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":96,"column":0}},{"generated":{"line":103,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":97,"column":0}},{"generated":{"line":104,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":98,"column":0}},{"generated":{"line":105,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":99,"column":0}},{"generated":{"line":106,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":100,"column":0}},{"generated":{"line":107,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":101,"column":0}},{"generated":{"line":108,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":102,"column":0}},{"generated":{"line":109,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":103,"column":0}},{"generated":{"line":110,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":104,"column":0}},{"generated":{"line":111,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":105,"column":0}},{"generated":{"line":112,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":106,"column":0}},{"generated":{"line":113,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":107,"column":0}},{"generated":{"line":114,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":108,"column":0}},{"generated":{"line":115,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":109,"column":0}},{"generated":{"line":116,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":110,"column":0}},{"generated":{"line":117,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":111,"column":0}},{"generated":{"line":118,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":112,"column":0}},{"generated":{"line":119,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":113,"column":0}},{"generated":{"line":120,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":114,"column":0}},{"generated":{"line":121,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":115,"column":0}},{"generated":{"line":122,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":116,"column":0}},{"generated":{"line":123,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":117,"column":0}},{"generated":{"line":124,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":118,"column":0}},{"generated":{"line":125,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":119,"column":0}},{"generated":{"line":126,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":120,"column":0}},{"generated":{"line":127,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":121,"column":0}},{"generated":{"line":128,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":122,"column":0}},{"generated":{"line":129,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":123,"column":0}},{"generated":{"line":130,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":124,"column":0}},{"generated":{"line":131,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":125,"column":0}},{"generated":{"line":132,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":126,"column":0}},{"generated":{"line":133,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":127,"column":0}},{"generated":{"line":134,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":128,"column":0}},{"generated":{"line":135,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":129,"column":0}},{"generated":{"line":136,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":130,"column":0}},{"generated":{"line":137,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":131,"column":0}},{"generated":{"line":138,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":132,"column":0}},{"generated":{"line":139,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":133,"column":0}},{"generated":{"line":140,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":134,"column":0}},{"generated":{"line":141,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":135,"column":0}},{"generated":{"line":142,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":136,"column":0}},{"generated":{"line":143,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":137,"column":0}},{"generated":{"line":144,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":138,"column":0}},{"generated":{"line":145,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":139,"column":0}},{"generated":{"line":146,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":140,"column":0}},{"generated":{"line":147,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":141,"column":0}},{"generated":{"line":148,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":142,"column":0}},{"generated":{"line":149,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":143,"column":0}},{"generated":{"line":150,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":144,"column":0}},{"generated":{"line":151,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":145,"column":0}},{"generated":{"line":152,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":146,"column":0}},{"generated":{"line":153,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":147,"column":0}},{"generated":{"line":154,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":148,"column":0}},{"generated":{"line":155,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":149,"column":0}},{"generated":{"line":156,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":150,"column":0}},{"generated":{"line":157,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":151,"column":0}},{"generated":{"line":158,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":152,"column":0}},{"generated":{"line":159,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":153,"column":0}},{"generated":{"line":160,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":154,"column":0}},{"generated":{"line":161,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":155,"column":0}},{"generated":{"line":162,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":156,"column":0}},{"generated":{"line":163,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":157,"column":0}},{"generated":{"line":164,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":158,"column":0}},{"generated":{"line":165,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":159,"column":0}},{"generated":{"line":166,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":160,"column":0}},{"generated":{"line":167,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":161,"column":0}},{"generated":{"line":168,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":162,"column":0}},{"generated":{"line":169,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":163,"column":0}},{"generated":{"line":170,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":164,"column":0}},{"generated":{"line":171,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":165,"column":0}},{"generated":{"line":172,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":166,"column":0}},{"generated":{"line":173,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":167,"column":0}},{"generated":{"line":174,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":168,"column":0}},{"generated":{"line":175,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":169,"column":0}},{"generated":{"line":176,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":170,"column":0}},{"generated":{"line":177,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":171,"column":0}},{"generated":{"line":178,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":172,"column":0}},{"generated":{"line":179,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":173,"column":0}},{"generated":{"line":180,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":174,"column":0}},{"generated":{"line":181,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":175,"column":0}},{"generated":{"line":182,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":176,"column":0}},{"generated":{"line":183,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":177,"column":0}},{"generated":{"line":184,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":178,"column":0}},{"generated":{"line":185,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":179,"column":0}},{"generated":{"line":186,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":180,"column":0}},{"generated":{"line":187,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":181,"column":0}},{"generated":{"line":188,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":182,"column":0}},{"generated":{"line":189,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":183,"column":0}},{"generated":{"line":190,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":184,"column":0}},{"generated":{"line":191,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":185,"column":0}},{"generated":{"line":192,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":186,"column":0}},{"generated":{"line":193,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":187,"column":0}},{"generated":{"line":194,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":188,"column":0}},{"generated":{"line":195,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":189,"column":0}},{"generated":{"line":196,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":190,"column":0}},{"generated":{"line":197,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":191,"column":0}},{"generated":{"line":198,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":192,"column":0}},{"generated":{"line":199,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":193,"column":0}},{"generated":{"line":200,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":194,"column":0}},{"generated":{"line":201,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":195,"column":0}},{"generated":{"line":202,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":196,"column":0}},{"generated":{"line":203,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":197,"column":0}},{"generated":{"line":204,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":198,"column":0}},{"generated":{"line":205,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":199,"column":0}},{"generated":{"line":206,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":200,"column":0}},{"generated":{"line":207,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":201,"column":0}},{"generated":{"line":208,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":202,"column":0}},{"generated":{"line":209,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":203,"column":0}},{"generated":{"line":210,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":204,"column":0}},{"generated":{"line":211,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":205,"column":0}},{"generated":{"line":212,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":206,"column":0}},{"generated":{"line":213,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":207,"column":0}},{"generated":{"line":214,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":208,"column":0}},{"generated":{"line":215,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":209,"column":0}},{"generated":{"line":216,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":210,"column":0}},{"generated":{"line":217,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":211,"column":0}},{"generated":{"line":218,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":212,"column":0}},{"generated":{"line":219,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":213,"column":0}},{"generated":{"line":220,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":214,"column":0}},{"generated":{"line":221,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":215,"column":0}},{"generated":{"line":222,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":216,"column":0}},{"generated":{"line":223,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":217,"column":0}},{"generated":{"line":224,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":218,"column":0}},{"generated":{"line":225,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":219,"column":0}},{"generated":{"line":226,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":220,"column":0}},{"generated":{"line":227,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":221,"column":0}},{"generated":{"line":228,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":222,"column":0}},{"generated":{"line":229,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":223,"column":0}},{"generated":{"line":230,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":224,"column":0}},{"generated":{"line":231,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":225,"column":0}},{"generated":{"line":232,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":226,"column":0}},{"generated":{"line":233,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":227,"column":0}},{"generated":{"line":234,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":228,"column":0}},{"generated":{"line":235,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":229,"column":0}},{"generated":{"line":236,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":230,"column":0}},{"generated":{"line":237,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":231,"column":0}},{"generated":{"line":238,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":232,"column":0}},{"generated":{"line":239,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":233,"column":0}},{"generated":{"line":240,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":234,"column":0}},{"generated":{"line":241,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":235,"column":0}},{"generated":{"line":242,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":236,"column":0}},{"generated":{"line":243,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":237,"column":0}},{"generated":{"line":244,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":238,"column":0}},{"generated":{"line":245,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":239,"column":0}},{"generated":{"line":246,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":240,"column":0}},{"generated":{"line":247,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":241,"column":0}},{"generated":{"line":248,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":242,"column":0}},{"generated":{"line":249,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":243,"column":0}},{"generated":{"line":250,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":244,"column":0}},{"generated":{"line":251,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":245,"column":0}},{"generated":{"line":252,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":246,"column":0}},{"generated":{"line":253,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":247,"column":0}},{"generated":{"line":254,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":248,"column":0}},{"generated":{"line":255,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":249,"column":0}},{"generated":{"line":256,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":250,"column":0}},{"generated":{"line":257,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":251,"column":0}},{"generated":{"line":258,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":252,"column":0}},{"generated":{"line":259,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":253,"column":0}},{"generated":{"line":260,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":254,"column":0}},{"generated":{"line":261,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":255,"column":0}},{"generated":{"line":262,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":256,"column":0}},{"generated":{"line":263,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":257,"column":0}},{"generated":{"line":264,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":258,"column":0}},{"generated":{"line":265,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":259,"column":0}},{"generated":{"line":266,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":260,"column":0}},{"generated":{"line":267,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":261,"column":0}},{"generated":{"line":268,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":262,"column":0}},{"generated":{"line":269,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":263,"column":0}},{"generated":{"line":270,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":264,"column":0}},{"generated":{"line":271,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":265,"column":0}},{"generated":{"line":271,"column":1},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":265,"column":1}},{"generated":{"line":272,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":265,"column":1},"name":"exports"},{"generated":{"line":272,"column":7},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":265,"column":1}},{"generated":{"line":272,"column":8},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":265,"column":1},"name":"default"},{"generated":{"line":272,"column":15},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":265,"column":1}},{"generated":{"line":272,"column":18},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":265,"column":1},"name":"_default"},{"generated":{"line":272,"column":26},"source":"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js","original":{"line":265,"column":1}}],"sources":{"node_modules/@cesium/engine/Source/Shaders/CloudCollectionFS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D u_noiseTexture;\\n\\\nuniform vec3 u_noiseTextureDimensions;\\n\\\nuniform float u_noiseDetail;\\n\\\nin vec2 v_offset;\\n\\\nin vec3 v_maximumSize;\\n\\\nin vec4 v_color;\\n\\\nin float v_slice;\\n\\\nin float v_brightness;\\n\\\n\\n\\\nfloat wrap(float value, float rangeLength) {\\n\\\n    if(value < 0.0) {\\n\\\n        float absValue = abs(value);\\n\\\n        float modValue = mod(absValue, rangeLength);\\n\\\n        return mod(rangeLength - modValue, rangeLength);\\n\\\n    }\\n\\\n    return mod(value, rangeLength);\\n\\\n}\\n\\\n\\n\\\nvec3 wrapVec(vec3 value, float rangeLength) {\\n\\\n    return vec3(wrap(value.x, rangeLength),\\n\\\n                wrap(value.y, rangeLength),\\n\\\n                wrap(value.z, rangeLength));\\n\\\n}\\n\\\n\\n\\\nvec2 voxelToUV(vec3 voxelIndex) {\\n\\\n    float textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\n    float noiseTextureRows = u_noiseTextureDimensions.y;\\n\\\n    float inverseNoiseTextureRows = u_noiseTextureDimensions.z;\\n\\\n\\n\\\n    float textureSliceWidthSquared = textureSliceWidth * textureSliceWidth;\\n\\\n    vec2 inverseNoiseTextureDimensions = vec2(noiseTextureRows / textureSliceWidthSquared,\\n\\\n                                            inverseNoiseTextureRows / textureSliceWidth);\\n\\\n    vec3 wrappedIndex = wrapVec(voxelIndex, textureSliceWidth);\\n\\\n    float column = mod(wrappedIndex.z, textureSliceWidth * inverseNoiseTextureRows);\\n\\\n    float row = floor(wrappedIndex.z / textureSliceWidth * noiseTextureRows);\\n\\\n\\n\\\n    float xPixelCoord = wrappedIndex.x + column * textureSliceWidth;\\n\\\n    float yPixelCoord = wrappedIndex.y + row * textureSliceWidth;\\n\\\n    return vec2(xPixelCoord, yPixelCoord) * inverseNoiseTextureDimensions;\\n\\\n}\\n\\\n\\n\\\n// Interpolate a voxel with its neighbor (along the positive X-axis)\\n\\\nvec4 lerpSamplesX(vec3 voxelIndex, float x) {\\n\\\n    vec2 uv0 = voxelToUV(voxelIndex);\\n\\\n    vec2 uv1 = voxelToUV(voxelIndex + vec3(1.0, 0.0, 0.0));\\n\\\n    vec4 sample0 = texture(u_noiseTexture, uv0);\\n\\\n    vec4 sample1 = texture(u_noiseTexture, uv1);\\n\\\n    return mix(sample0, sample1, x);\\n\\\n}\\n\\\n\\n\\\nvec4 sampleNoiseTexture(vec3 position) {\\n\\\n    float textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\n    vec3 recenteredPos = position + vec3(textureSliceWidth / 2.0);\\n\\\n    vec3 lerpValue = fract(recenteredPos);\\n\\\n    vec3 voxelIndex = floor(recenteredPos);\\n\\\n\\n\\\n    vec4 xLerp00 = lerpSamplesX(voxelIndex, lerpValue.x);\\n\\\n    vec4 xLerp01 = lerpSamplesX(voxelIndex + vec3(0.0, 0.0, 1.0), lerpValue.x);\\n\\\n    vec4 xLerp10 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 0.0), lerpValue.x);\\n\\\n    vec4 xLerp11 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 1.0), lerpValue.x);\\n\\\n\\n\\\n    vec4 yLerp0 = mix(xLerp00, xLerp10, lerpValue.y);\\n\\\n    vec4 yLerp1 = mix(xLerp01, xLerp11, lerpValue.y);\\n\\\n    return mix(yLerp0, yLerp1, lerpValue.z);\\n\\\n}\\n\\\n\\n\\\n// Intersection with a unit sphere with radius 0.5 at center (0, 0, 0).\\n\\\nbool intersectSphere(vec3 origin, vec3 dir, float slice,\\n\\\n                     out vec3 point, out vec3 normal) {\\n\\\n    float A = dot(dir, dir);\\n\\\n    float B = dot(origin, dir);\\n\\\n    float C = dot(origin, origin) - 0.25;\\n\\\n    float discriminant = (B * B) - (A * C);\\n\\\n    if(discriminant < 0.0) {\\n\\\n        return false;\\n\\\n    }\\n\\\n    float root = sqrt(discriminant);\\n\\\n    float t = (-B - root) / A;\\n\\\n    if(t < 0.0) {\\n\\\n        t = (-B + root) / A;\\n\\\n    }\\n\\\n    point = origin + t * dir;\\n\\\n\\n\\\n    if(slice >= 0.0) {\\n\\\n        point.z = (slice / 2.0) - 0.5;\\n\\\n        if(length(point) > 0.5) {\\n\\\n            return false;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    normal = normalize(point);\\n\\\n    point -= czm_epsilon2 * normal;\\n\\\n    return true;\\n\\\n}\\n\\\n\\n\\\n// Transforms the ray origin and direction into unit sphere space,\\n\\\n// then transforms the result back into the ellipsoid's space.\\n\\\nbool intersectEllipsoid(vec3 origin, vec3 dir, vec3 center, vec3 scale, float slice,\\n\\\n                        out vec3 point, out vec3 normal) {\\n\\\n    if(scale.x <= 0.01 || scale.y < 0.01 || scale.z < 0.01) {\\n\\\n        return false;\\n\\\n    }\\n\\\n\\n\\\n    vec3 o = (origin - center) / scale;\\n\\\n    vec3 d = dir / scale;\\n\\\n    vec3 p, n;\\n\\\n    bool intersected = intersectSphere(o, d, slice, p, n);\\n\\\n    if(intersected) {\\n\\\n        point = (p * scale) + center;\\n\\\n        normal = n;\\n\\\n    }\\n\\\n    return intersected;\\n\\\n}\\n\\\n\\n\\\n// Assume that if phase shift is being called for octave i,\\n\\\n// the frequency is of i - 1. This saves us from doing extra\\n\\\n// division / multiplication operations.\\n\\\nvec2 phaseShift2D(vec2 p, vec2 freq) {\\n\\\n    return (czm_pi / 2.0) * sin(freq.yx * p.yx);\\n\\\n}\\n\\\n\\n\\\nvec2 phaseShift3D(vec3 p, vec2 freq) {\\n\\\n    return phaseShift2D(p.xy, freq) + czm_pi * vec2(sin(freq.x * p.z));\\n\\\n}\\n\\\n\\n\\\n// The cloud texture function derived from Gardner's 1985 paper,\\n\\\n// \\\"Visual Simulation of Clouds.\\\"\\n\\\n// https://www.cs.drexel.edu/~david/Classes/Papers/p297-gardner.pdf\\n\\\nconst float T0    = 0.6;  // contrast of the texture pattern\\n\\\nconst float k     = 0.1;  // computed to produce a maximum value of 1\\n\\\nconst float C0    = 0.8;  // coefficient\\n\\\nconst float FX0   = 0.6;  // frequency X\\n\\\nconst float FY0   = 0.6;  // frequency Y\\n\\\nconst int octaves = 5;\\n\\\n\\n\\\nfloat T(vec3 point) {\\n\\\n    vec2 sum = vec2(0.0);\\n\\\n    float Ci = C0;\\n\\\n    vec2 FXY = vec2(FX0, FY0);\\n\\\n    vec2 PXY = vec2(0.0);\\n\\\n    for(int i = 1; i <= octaves; i++) {\\n\\\n        PXY = phaseShift3D(point, FXY);\\n\\\n        Ci *= 0.707;\\n\\\n        FXY *= 2.0;\\n\\\n        vec2 sinTerm = sin(FXY * point.xy + PXY);\\n\\\n        sum += Ci * sinTerm + vec2(T0);\\n\\\n    }\\n\\\n    return k * sum.x * sum.y;\\n\\\n}\\n\\\n\\n\\\nconst float a = 0.5;  // fraction of surface reflection due to ambient or scattered light,\\n\\\nconst float t = 0.4;  // fraction of texture shading\\n\\\nconst float s = 0.25; // fraction of specular reflection\\n\\\n\\n\\\nfloat I(float Id, float Is, float It) {\\n\\\n    return (1.0 - a) * ((1.0 - t) * ((1.0 - s) * Id + s * Is) + t * It) + a;\\n\\\n}\\n\\\n\\n\\\nconst vec3 lightDir = normalize(vec3(0.2, -1.0, 0.7));\\n\\\n\\n\\\nvec4 drawCloud(vec3 rayOrigin, vec3 rayDir, vec3 cloudCenter, vec3 cloudScale, float cloudSlice,\\n\\\n               float brightness) {\\n\\\n    vec3 cloudPoint, cloudNormal;\\n\\\n    if(!intersectEllipsoid(rayOrigin, rayDir, cloudCenter, cloudScale, cloudSlice,\\n\\\n                            cloudPoint, cloudNormal)) {\\n\\\n        return vec4(0.0);\\n\\\n    }\\n\\\n\\n\\\n    float Id = clamp(dot(cloudNormal, -lightDir), 0.0, 1.0);  // diffuse reflection\\n\\\n    float Is = max(pow(dot(-lightDir, -rayDir), 2.0), 0.0);   // specular reflection\\n\\\n    float It = T(cloudPoint);                                 // texture function\\n\\\n    float intensity = I(Id, Is, It);\\n\\\n    vec3 color = vec3(intensity * clamp(brightness, 0.1, 1.0));\\n\\\n\\n\\\n    vec4 noise = sampleNoiseTexture(u_noiseDetail * cloudPoint);\\n\\\n    float W = noise.x;\\n\\\n    float W2 = noise.y;\\n\\\n    float W3 = noise.z;\\n\\\n\\n\\\n    // The dot product between the cloud's normal and the ray's direction is greatest\\n\\\n    // in the center of the ellipsoid's surface. It decreases towards the edge.\\n\\\n    // Thus, it is used to blur the areas leading to the edges of the ellipsoid,\\n\\\n    // so that no harsh lines appear.\\n\\\n\\n\\\n    // The first (and biggest) layer of worley noise is then subtracted from this.\\n\\\n    // The final result is scaled up so that the base cloud is not too translucent.\\n\\\n    float ndDot = clamp(dot(cloudNormal, -rayDir), 0.0, 1.0);\\n\\\n    float TR = pow(ndDot, 3.0) - W; // translucency\\n\\\n    TR *= 1.3;\\n\\\n\\n\\\n    // Subtracting the second and third layers of worley noise is more complicated.\\n\\\n    // If these layers of noise were simply subtracted from the current translucency,\\n\\\n    // the shape derived from the first layer of noise would be completely deleted.\\n\\\n    // The erosion of this noise should thus be constricted to the edges of the cloud.\\n\\\n    // However, because the edges of the ellipsoid were already blurred away, mapping\\n\\\n    // the noise to (1.0 - ndDot) will have no impact on most of the cloud's appearance.\\n\\\n    // The value of (0.5 - ndDot) provides the best compromise.\\n\\\n    float minusDot = 0.5 - ndDot;\\n\\\n\\n\\\n    // Even with the previous calculation, subtracting the second layer of wnoise\\n\\\n    // erode too much of the cloud. The addition of it, however, will detailed\\n\\\n    // volume to the cloud. As long as the noise is only added and not subtracted,\\n\\\n    // the results are aesthetically pleasing.\\n\\\n\\n\\\n    // The minusDot product is mapped in a way that it is larger at the edges of\\n\\\n    // the ellipsoid, so a subtraction and min operation are used instead of\\n\\\n    // an addition and max one.\\n\\\n    TR -= min(minusDot * W2, 0.0);\\n\\\n\\n\\\n    // The third level of worley noise is subtracted from the result, with some\\n\\\n    // modifications. First, a scalar is added to minusDot so that the noise\\n\\\n    // starts affecting the shape farther away from the center of the ellipsoid's\\n\\\n    // surface. Then, it is scaled down so its impact is not too intense.\\n\\\n    TR -= 0.8 * (minusDot + 0.25) * W3;\\n\\\n\\n\\\n    // The texture function's shading does not correlate with the shape of the cloud\\n\\\n    // produced by the layers of noise, so an extra shading scalar is calculated.\\n\\\n    // The darkest areas of the cloud are assigned to be where the noise erodes\\n\\\n    // the cloud the most. This is then interpolated based on the translucency\\n\\\n    // and the diffuse shading term of that point in the cloud.\\n\\\n    float shading = mix(1.0 - 0.8 * W * W, 1.0, Id * TR);\\n\\\n\\n\\\n    // To avoid values that are too dark, this scalar is increased by a small amount\\n\\\n    // and clamped so it never goes to zero.\\n\\\n    shading = clamp(shading + 0.2, 0.3, 1.0);\\n\\\n\\n\\\n    // Finally, the contrast of the cloud's color is increased.\\n\\\n    vec3 finalColor = mix(vec3(0.5), shading * color, 1.15);\\n\\\n    return vec4(finalColor, clamp(TR, 0.0, 1.0)) * v_color;\\n\\\n}\\n\\\n\\n\\\nvoid main() {\\n\\\n#ifdef DEBUG_BILLBOARDS\\n\\\n    out_FragColor = vec4(0.0, 0.5, 0.5, 1.0);\\n\\\n#endif\\n\\\n    // To avoid calculations with high values,\\n\\\n    // we raycast from an arbitrarily smaller space.\\n\\\n    vec2 coordinate = v_maximumSize.xy * v_offset;\\n\\\n\\n\\\n    vec3 ellipsoidScale = 0.82 * v_maximumSize;\\n\\\n    vec3 ellipsoidCenter = vec3(0.0);\\n\\\n\\n\\\n    float zOffset = max(ellipsoidScale.z - 10.0, 0.0);\\n\\\n    vec3 eye = vec3(0, 0, -10.0 - zOffset);\\n\\\n    vec3 rayDir = normalize(vec3(coordinate, 1.0) - eye);\\n\\\n    vec3 rayOrigin = eye;\\n\\\n#ifdef DEBUG_ELLIPSOIDS\\n\\\n    vec3 point, normal;\\n\\\n    if(intersectEllipsoid(rayOrigin, rayDir, ellipsoidCenter, ellipsoidScale, v_slice,\\n\\\n                          point, normal)) {\\n\\\n        out_FragColor = v_brightness * v_color;\\n\\\n    }\\n\\\n#else\\n\\\n#ifndef DEBUG_BILLBOARDS\\n\\\n    vec4 cloud = drawCloud(rayOrigin, rayDir,\\n\\\n                           ellipsoidCenter, ellipsoidScale, v_slice, v_brightness);\\n\\\n    if(cloud.w < 0.01) {\\n\\\n        discard;\\n\\\n    }\\n\\\n    out_FragColor = cloud;\\n\\\n#endif\\n\\\n#endif\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"cd7fa598fb38efad161320071ea6b83f","cacheData":{"env":{}}}