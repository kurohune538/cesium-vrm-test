{"id":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","dependencies":[{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/package.json","includedInParent":true,"mtime":1679775809033},{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/node_modules/@cesium/engine/package.json","includedInParent":true,"mtime":1679775775888}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"uniform vec3 u_noiseTextureDimensions;\\n\\\nuniform float u_noiseDetail;\\n\\\nuniform vec3 u_noiseOffset;\\n\\\nin vec2 v_position;\\n\\\n\\n\\\nfloat wrap(float value, float rangeLength) {\\n\\\n    if(value < 0.0) {\\n\\\n        float absValue = abs(value);\\n\\\n        float modValue = mod(absValue, rangeLength);\\n\\\n        return mod(rangeLength - modValue, rangeLength);\\n\\\n    }\\n\\\n    return mod(value, rangeLength);\\n\\\n}\\n\\\n\\n\\\nvec3 wrapVec(vec3 value, float rangeLength) {\\n\\\n    return vec3(wrap(value.x, rangeLength),\\n\\\n                wrap(value.y, rangeLength),\\n\\\n                wrap(value.z, rangeLength));\\n\\\n}\\n\\\n\\n\\\nvec3 random3(vec3 p) {\\n\\\n    float dot1 = dot(p, vec3(127.1, 311.7, 932.8));\\n\\\n    float dot2 = dot(p, vec3(269.5, 183.3, 421.4));\\n\\\n    return fract(vec3(sin(dot1 - dot2), cos(dot1 * dot2), dot1 * dot2));\\n\\\n}\\n\\\n\\n\\\n// Frequency corresponds to cell size.\\n\\\n// The higher the frequency, the smaller the cell size.\\n\\\nvec3 getWorleyCellPoint(vec3 centerCell, vec3 offset, float freq) {\\n\\\n    float textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\n    vec3 cell = centerCell + offset;\\n\\\n    cell = wrapVec(cell, textureSliceWidth / u_noiseDetail);\\n\\\n    cell += floor(u_noiseOffset / u_noiseDetail);\\n\\\n    vec3 p = offset + random3(cell);\\n\\\n    return p;\\n\\\n}\\n\\\n\\n\\\nfloat worleyNoise(vec3 p, float freq) {\\n\\\n    vec3 centerCell = floor(p * freq);\\n\\\n    vec3 pointInCell = fract(p * freq);\\n\\\n    float shortestDistance = 1000.0;\\n\\\n\\n\\\n    for(float z = -1.0; z <= 1.0; z++) {\\n\\\n        for(float y = -1.0; y <= 1.0; y++) {\\n\\\n            for(float x = -1.0; x <= 1.0; x++) {\\n\\\n                vec3 offset = vec3(x, y, z);\\n\\\n                vec3 point = getWorleyCellPoint(centerCell, offset, freq);\\n\\\n\\n\\\n                float distance = length(pointInCell - point);\\n\\\n                if(distance < shortestDistance) {\\n\\\n                    shortestDistance = distance;\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    return shortestDistance;\\n\\\n}\\n\\\n\\n\\\nconst float MAX_FBM_ITERATIONS = 10.0;\\n\\\n\\n\\\nfloat worleyFBMNoise(vec3 p, float octaves, float scale) {\\n\\\n    float noise = 0.0;\\n\\\n    float freq = 1.0;\\n\\\n    float persistence = 0.625;\\n\\\n    for(float i = 0.0; i < MAX_FBM_ITERATIONS; i++) {\\n\\\n        if(i >= octaves) {\\n\\\n            break;\\n\\\n        }\\n\\\n\\n\\\n        noise += worleyNoise(p * scale, freq * scale) * persistence;\\n\\\n        persistence *= 0.5;\\n\\\n        freq *= 2.0;\\n\\\n    }\\n\\\n    return noise;\\n\\\n}\\n\\\n\\n\\\nvoid main() {\\n\\\n    float textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\n    float inverseNoiseTextureRows = u_noiseTextureDimensions.z;\\n\\\n    float x = mod(v_position.x, textureSliceWidth);\\n\\\n    float y = mod(v_position.y, textureSliceWidth);\\n\\\n    float sliceRow = floor(v_position.y / textureSliceWidth);\\n\\\n    float z = floor(v_position.x / textureSliceWidth) + sliceRow * inverseNoiseTextureRows * textureSliceWidth;\\n\\\n\\n\\\n    vec3 position = vec3(x, y, z);\\n\\\n    position /= u_noiseDetail;\\n\\\n    float worley0 = clamp(worleyFBMNoise(position, 3.0, 1.0), 0.0, 1.0);\\n\\\n    float worley1 = clamp(worleyFBMNoise(position, 3.0, 2.0), 0.0, 1.0);\\n\\\n    float worley2 = clamp(worleyFBMNoise(position, 3.0, 3.0), 0.0, 1.0);\\n\\\n    out_FragColor = vec4(worley0, worley1, worley2, 1.0);\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":4},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":1,"column":0},"name":"_default"},{"generated":{"line":8,"column":12},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":2,"column":15}},{"generated":{"line":9,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":4,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":5,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":7,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":8,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":9,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":10,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":11,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":12,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":13,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":14,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":15,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":16,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":17,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":18,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":19,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":20,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":21,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":22,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":23,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":24,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":25,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":26,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":27,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":28,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":29,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":30,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":31,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":32,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":33,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":34,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":35,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":36,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":37,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":38,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":39,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":40,"column":0}},{"generated":{"line":47,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":41,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":42,"column":0}},{"generated":{"line":49,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":43,"column":0}},{"generated":{"line":50,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":44,"column":0}},{"generated":{"line":51,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":45,"column":0}},{"generated":{"line":52,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":46,"column":0}},{"generated":{"line":53,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":47,"column":0}},{"generated":{"line":54,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":48,"column":0}},{"generated":{"line":55,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":49,"column":0}},{"generated":{"line":56,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":50,"column":0}},{"generated":{"line":57,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":51,"column":0}},{"generated":{"line":58,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":52,"column":0}},{"generated":{"line":59,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":53,"column":0}},{"generated":{"line":60,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":54,"column":0}},{"generated":{"line":61,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":55,"column":0}},{"generated":{"line":62,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":56,"column":0}},{"generated":{"line":63,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":57,"column":0}},{"generated":{"line":64,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":58,"column":0}},{"generated":{"line":65,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":59,"column":0}},{"generated":{"line":66,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":60,"column":0}},{"generated":{"line":67,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":61,"column":0}},{"generated":{"line":68,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":62,"column":0}},{"generated":{"line":69,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":63,"column":0}},{"generated":{"line":70,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":64,"column":0}},{"generated":{"line":71,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":65,"column":0}},{"generated":{"line":72,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":66,"column":0}},{"generated":{"line":73,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":67,"column":0}},{"generated":{"line":74,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":68,"column":0}},{"generated":{"line":75,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":69,"column":0}},{"generated":{"line":76,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":70,"column":0}},{"generated":{"line":77,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":71,"column":0}},{"generated":{"line":78,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":72,"column":0}},{"generated":{"line":79,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":73,"column":0}},{"generated":{"line":80,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":74,"column":0}},{"generated":{"line":81,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":75,"column":0}},{"generated":{"line":82,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":76,"column":0}},{"generated":{"line":83,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":77,"column":0}},{"generated":{"line":84,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":78,"column":0}},{"generated":{"line":85,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":79,"column":0}},{"generated":{"line":86,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":80,"column":0}},{"generated":{"line":87,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":81,"column":0}},{"generated":{"line":88,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":82,"column":0}},{"generated":{"line":89,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":83,"column":0}},{"generated":{"line":90,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":84,"column":0}},{"generated":{"line":91,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":85,"column":0}},{"generated":{"line":92,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":86,"column":0}},{"generated":{"line":93,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":87,"column":0}},{"generated":{"line":94,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":88,"column":0}},{"generated":{"line":95,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":89,"column":0}},{"generated":{"line":96,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":90,"column":0}},{"generated":{"line":97,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":91,"column":0}},{"generated":{"line":98,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":92,"column":0}},{"generated":{"line":99,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":93,"column":0}},{"generated":{"line":100,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":94,"column":0}},{"generated":{"line":100,"column":1},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":94,"column":1}},{"generated":{"line":101,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":94,"column":1},"name":"exports"},{"generated":{"line":101,"column":7},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":94,"column":1}},{"generated":{"line":101,"column":8},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":94,"column":1},"name":"default"},{"generated":{"line":101,"column":15},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":94,"column":1}},{"generated":{"line":101,"column":18},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":94,"column":1},"name":"_default"},{"generated":{"line":101,"column":26},"source":"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js","original":{"line":94,"column":1}}],"sources":{"node_modules/@cesium/engine/Source/Shaders/CloudNoiseFS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec3 u_noiseTextureDimensions;\\n\\\nuniform float u_noiseDetail;\\n\\\nuniform vec3 u_noiseOffset;\\n\\\nin vec2 v_position;\\n\\\n\\n\\\nfloat wrap(float value, float rangeLength) {\\n\\\n    if(value < 0.0) {\\n\\\n        float absValue = abs(value);\\n\\\n        float modValue = mod(absValue, rangeLength);\\n\\\n        return mod(rangeLength - modValue, rangeLength);\\n\\\n    }\\n\\\n    return mod(value, rangeLength);\\n\\\n}\\n\\\n\\n\\\nvec3 wrapVec(vec3 value, float rangeLength) {\\n\\\n    return vec3(wrap(value.x, rangeLength),\\n\\\n                wrap(value.y, rangeLength),\\n\\\n                wrap(value.z, rangeLength));\\n\\\n}\\n\\\n\\n\\\nvec3 random3(vec3 p) {\\n\\\n    float dot1 = dot(p, vec3(127.1, 311.7, 932.8));\\n\\\n    float dot2 = dot(p, vec3(269.5, 183.3, 421.4));\\n\\\n    return fract(vec3(sin(dot1 - dot2), cos(dot1 * dot2), dot1 * dot2));\\n\\\n}\\n\\\n\\n\\\n// Frequency corresponds to cell size.\\n\\\n// The higher the frequency, the smaller the cell size.\\n\\\nvec3 getWorleyCellPoint(vec3 centerCell, vec3 offset, float freq) {\\n\\\n    float textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\n    vec3 cell = centerCell + offset;\\n\\\n    cell = wrapVec(cell, textureSliceWidth / u_noiseDetail);\\n\\\n    cell += floor(u_noiseOffset / u_noiseDetail);\\n\\\n    vec3 p = offset + random3(cell);\\n\\\n    return p;\\n\\\n}\\n\\\n\\n\\\nfloat worleyNoise(vec3 p, float freq) {\\n\\\n    vec3 centerCell = floor(p * freq);\\n\\\n    vec3 pointInCell = fract(p * freq);\\n\\\n    float shortestDistance = 1000.0;\\n\\\n\\n\\\n    for(float z = -1.0; z <= 1.0; z++) {\\n\\\n        for(float y = -1.0; y <= 1.0; y++) {\\n\\\n            for(float x = -1.0; x <= 1.0; x++) {\\n\\\n                vec3 offset = vec3(x, y, z);\\n\\\n                vec3 point = getWorleyCellPoint(centerCell, offset, freq);\\n\\\n\\n\\\n                float distance = length(pointInCell - point);\\n\\\n                if(distance < shortestDistance) {\\n\\\n                    shortestDistance = distance;\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    return shortestDistance;\\n\\\n}\\n\\\n\\n\\\nconst float MAX_FBM_ITERATIONS = 10.0;\\n\\\n\\n\\\nfloat worleyFBMNoise(vec3 p, float octaves, float scale) {\\n\\\n    float noise = 0.0;\\n\\\n    float freq = 1.0;\\n\\\n    float persistence = 0.625;\\n\\\n    for(float i = 0.0; i < MAX_FBM_ITERATIONS; i++) {\\n\\\n        if(i >= octaves) {\\n\\\n            break;\\n\\\n        }\\n\\\n\\n\\\n        noise += worleyNoise(p * scale, freq * scale) * persistence;\\n\\\n        persistence *= 0.5;\\n\\\n        freq *= 2.0;\\n\\\n    }\\n\\\n    return noise;\\n\\\n}\\n\\\n\\n\\\nvoid main() {\\n\\\n    float textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\n    float inverseNoiseTextureRows = u_noiseTextureDimensions.z;\\n\\\n    float x = mod(v_position.x, textureSliceWidth);\\n\\\n    float y = mod(v_position.y, textureSliceWidth);\\n\\\n    float sliceRow = floor(v_position.y / textureSliceWidth);\\n\\\n    float z = floor(v_position.x / textureSliceWidth) + sliceRow * inverseNoiseTextureRows * textureSliceWidth;\\n\\\n\\n\\\n    vec3 position = vec3(x, y, z);\\n\\\n    position /= u_noiseDetail;\\n\\\n    float worley0 = clamp(worleyFBMNoise(position, 3.0, 1.0), 0.0, 1.0);\\n\\\n    float worley1 = clamp(worleyFBMNoise(position, 3.0, 2.0), 0.0, 1.0);\\n\\\n    float worley2 = clamp(worleyFBMNoise(position, 3.0, 3.0), 0.0, 1.0);\\n\\\n    out_FragColor = vec4(worley0, worley1, worley2, 1.0);\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"bfc5fc13b5f05161d9095bc652a1b3db","cacheData":{"env":{}}}