{"id":"node_modules/bitmap-sdf/index.js","dependencies":[{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/package.json","includedInParent":true,"mtime":1679775809033},{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/node_modules/bitmap-sdf/package.json","includedInParent":true,"mtime":1679775773679}],"generated":{"js":"'use strict'\r\n\r\nmodule.exports = calcSDF\r\n\r\nvar INF = 1e20\r\n\r\nfunction calcSDF(src, options) {\r\n    if (!options) options = {}\r\n\r\n    var cutoff = options.cutoff == null ? 0.25 : options.cutoff\r\n    var radius = options.radius == null ? 8 : options.radius\r\n    var channel = options.channel || 0\r\n    var w, h, size, data, intData, stride, ctx, canvas, imgData, i, l\r\n\r\n    // handle image container\r\n    if (ArrayBuffer.isView(src) || Array.isArray(src)) {\r\n        if (!options.width || !options.height) throw Error('For raw data width and height should be provided by options')\r\n        w = options.width, h = options.height\r\n        data = src\r\n\r\n        if (!options.stride) stride = Math.floor(src.length / w / h)\r\n        else stride = options.stride\r\n    }\r\n    else {\r\n        if (window.HTMLCanvasElement && src instanceof window.HTMLCanvasElement) {\r\n            canvas = src\r\n            ctx = canvas.getContext('2d')\r\n            w = canvas.width, h = canvas.height\r\n            imgData = ctx.getImageData(0, 0, w, h)\r\n            data = imgData.data\r\n            stride = 4\r\n        }\r\n        else if (window.CanvasRenderingContext2D && src instanceof window.CanvasRenderingContext2D) {\r\n            canvas = src.canvas\r\n            ctx = src\r\n            w = canvas.width, h = canvas.height\r\n            imgData = ctx.getImageData(0, 0, w, h)\r\n            data = imgData.data\r\n            stride = 4\r\n        }\r\n        else if (window.ImageData && src instanceof window.ImageData) {\r\n            imgData = src\r\n            w = src.width, h = src.height\r\n            data = imgData.data\r\n            stride = 4\r\n        }\r\n    }\r\n\r\n    size = Math.max(w, h)\r\n\r\n    //convert int data to floats\r\n    if ((window.Uint8ClampedArray && data instanceof window.Uint8ClampedArray) || (window.Uint8Array && data instanceof window.Uint8Array)) {\r\n        intData = data\r\n        data = Array(w*h)\r\n\r\n        for (i = 0, l = Math.floor(intData.length / stride); i < l; i++) {\r\n            data[i] = intData[i*stride + channel] / 255\r\n        }\r\n    }\r\n    else {\r\n        if (stride !== 1) throw Error('Raw data can have only 1 value per pixel')\r\n    }\r\n\r\n    // temporary arrays for the distance transform\r\n    var gridOuter = Array(w * h)\r\n    var gridInner = Array(w * h)\r\n    var f = Array(size)\r\n    var d = Array(size)\r\n    var z = Array(size + 1)\r\n    var v = Array(size)\r\n\r\n    for (i = 0, l = w * h; i < l; i++) {\r\n        var a = data[i]\r\n        gridOuter[i] = a === 1 ? 0 : a === 0 ? INF : Math.pow(Math.max(0, 0.5 - a), 2)\r\n        gridInner[i] = a === 1 ? INF : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2)\r\n    }\r\n\r\n    edt(gridOuter, w, h, f, d, v, z)\r\n    edt(gridInner, w, h, f, d, v, z)\r\n\r\n    var dist = window.Float32Array ? new Float32Array(w * h) : new Array(w * h)\r\n\r\n    for (i = 0, l = w*h; i < l; i++) {\r\n        dist[i] = Math.min(Math.max(1 - ( (gridOuter[i] - gridInner[i]) / radius + cutoff), 0), 1)\r\n    }\r\n\r\n    return dist\r\n}\r\n\r\n// 2D Euclidean distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/dt/\r\nfunction edt(data, width, height, f, d, v, z) {\r\n    for (var x = 0; x < width; x++) {\r\n        for (var y = 0; y < height; y++) {\r\n            f[y] = data[y * width + x]\r\n        }\r\n        edt1d(f, d, v, z, height)\r\n        for (y = 0; y < height; y++) {\r\n            data[y * width + x] = d[y]\r\n        }\r\n    }\r\n    for (y = 0; y < height; y++) {\r\n        for (x = 0; x < width; x++) {\r\n            f[x] = data[y * width + x]\r\n        }\r\n        edt1d(f, d, v, z, width)\r\n        for (x = 0; x < width; x++) {\r\n            data[y * width + x] = Math.sqrt(d[x])\r\n        }\r\n    }\r\n}\r\n\r\n// 1D squared distance transform\r\nfunction edt1d(f, d, v, z, n) {\r\n    v[0] = 0;\r\n    z[0] = -INF\r\n    z[1] = +INF\r\n\r\n    for (var q = 1, k = 0; q < n; q++) {\r\n        var s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k])\r\n        while (s <= z[k]) {\r\n            k--\r\n            s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k])\r\n        }\r\n        k++\r\n        v[k] = q\r\n        z[k] = s\r\n        z[k + 1] = +INF\r\n    }\r\n\r\n    for (q = 0, k = 0; q < n; q++) {\r\n        while (z[k + 1] < q) k++\r\n        d[q] = (q - v[k]) * (q - v[k]) + f[v[k]]\r\n    }\r\n}\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/bitmap-sdf/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/bitmap-sdf/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}}],"sources":{"node_modules/bitmap-sdf/index.js":"'use strict'\r\n\r\nmodule.exports = calcSDF\r\n\r\nvar INF = 1e20\r\n\r\nfunction calcSDF(src, options) {\r\n    if (!options) options = {}\r\n\r\n    var cutoff = options.cutoff == null ? 0.25 : options.cutoff\r\n    var radius = options.radius == null ? 8 : options.radius\r\n    var channel = options.channel || 0\r\n    var w, h, size, data, intData, stride, ctx, canvas, imgData, i, l\r\n\r\n    // handle image container\r\n    if (ArrayBuffer.isView(src) || Array.isArray(src)) {\r\n        if (!options.width || !options.height) throw Error('For raw data width and height should be provided by options')\r\n        w = options.width, h = options.height\r\n        data = src\r\n\r\n        if (!options.stride) stride = Math.floor(src.length / w / h)\r\n        else stride = options.stride\r\n    }\r\n    else {\r\n        if (window.HTMLCanvasElement && src instanceof window.HTMLCanvasElement) {\r\n            canvas = src\r\n            ctx = canvas.getContext('2d')\r\n            w = canvas.width, h = canvas.height\r\n            imgData = ctx.getImageData(0, 0, w, h)\r\n            data = imgData.data\r\n            stride = 4\r\n        }\r\n        else if (window.CanvasRenderingContext2D && src instanceof window.CanvasRenderingContext2D) {\r\n            canvas = src.canvas\r\n            ctx = src\r\n            w = canvas.width, h = canvas.height\r\n            imgData = ctx.getImageData(0, 0, w, h)\r\n            data = imgData.data\r\n            stride = 4\r\n        }\r\n        else if (window.ImageData && src instanceof window.ImageData) {\r\n            imgData = src\r\n            w = src.width, h = src.height\r\n            data = imgData.data\r\n            stride = 4\r\n        }\r\n    }\r\n\r\n    size = Math.max(w, h)\r\n\r\n    //convert int data to floats\r\n    if ((window.Uint8ClampedArray && data instanceof window.Uint8ClampedArray) || (window.Uint8Array && data instanceof window.Uint8Array)) {\r\n        intData = data\r\n        data = Array(w*h)\r\n\r\n        for (i = 0, l = Math.floor(intData.length / stride); i < l; i++) {\r\n            data[i] = intData[i*stride + channel] / 255\r\n        }\r\n    }\r\n    else {\r\n        if (stride !== 1) throw Error('Raw data can have only 1 value per pixel')\r\n    }\r\n\r\n    // temporary arrays for the distance transform\r\n    var gridOuter = Array(w * h)\r\n    var gridInner = Array(w * h)\r\n    var f = Array(size)\r\n    var d = Array(size)\r\n    var z = Array(size + 1)\r\n    var v = Array(size)\r\n\r\n    for (i = 0, l = w * h; i < l; i++) {\r\n        var a = data[i]\r\n        gridOuter[i] = a === 1 ? 0 : a === 0 ? INF : Math.pow(Math.max(0, 0.5 - a), 2)\r\n        gridInner[i] = a === 1 ? INF : a === 0 ? 0 : Math.pow(Math.max(0, a - 0.5), 2)\r\n    }\r\n\r\n    edt(gridOuter, w, h, f, d, v, z)\r\n    edt(gridInner, w, h, f, d, v, z)\r\n\r\n    var dist = window.Float32Array ? new Float32Array(w * h) : new Array(w * h)\r\n\r\n    for (i = 0, l = w*h; i < l; i++) {\r\n        dist[i] = Math.min(Math.max(1 - ( (gridOuter[i] - gridInner[i]) / radius + cutoff), 0), 1)\r\n    }\r\n\r\n    return dist\r\n}\r\n\r\n// 2D Euclidean distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/dt/\r\nfunction edt(data, width, height, f, d, v, z) {\r\n    for (var x = 0; x < width; x++) {\r\n        for (var y = 0; y < height; y++) {\r\n            f[y] = data[y * width + x]\r\n        }\r\n        edt1d(f, d, v, z, height)\r\n        for (y = 0; y < height; y++) {\r\n            data[y * width + x] = d[y]\r\n        }\r\n    }\r\n    for (y = 0; y < height; y++) {\r\n        for (x = 0; x < width; x++) {\r\n            f[x] = data[y * width + x]\r\n        }\r\n        edt1d(f, d, v, z, width)\r\n        for (x = 0; x < width; x++) {\r\n            data[y * width + x] = Math.sqrt(d[x])\r\n        }\r\n    }\r\n}\r\n\r\n// 1D squared distance transform\r\nfunction edt1d(f, d, v, z, n) {\r\n    v[0] = 0;\r\n    z[0] = -INF\r\n    z[1] = +INF\r\n\r\n    for (var q = 1, k = 0; q < n; q++) {\r\n        var s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k])\r\n        while (s <= z[k]) {\r\n            k--\r\n            s = ((f[q] + q * q) - (f[v[k]] + v[k] * v[k])) / (2 * q - 2 * v[k])\r\n        }\r\n        k++\r\n        v[k] = q\r\n        z[k] = s\r\n        z[k + 1] = +INF\r\n    }\r\n\r\n    for (q = 0, k = 0; q < n; q++) {\r\n        while (z[k + 1] < q) k++\r\n        d[q] = (q - v[k]) * (q - v[k]) + f[v[k]]\r\n    }\r\n}\r\n"},"lineCount":135}},"error":null,"hash":"65ae2239d788813a4769354c9db7eb17","cacheData":{"env":{}}}