{"id":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","dependencies":[{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/package.json","includedInParent":true,"mtime":1679775809033},{"name":"/Users/shinnosukekomiya/Documents/me/cesium-three-test/node_modules/@cesium/engine/package.json","includedInParent":true,"mtime":1679775775888}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"uniform vec3 u_radiiAndDynamicAtmosphereColor;\\n\\\n\\n\\\nuniform float u_atmosphereLightIntensity;\\n\\\nuniform float u_atmosphereRayleighScaleHeight;\\n\\\nuniform float u_atmosphereMieScaleHeight;\\n\\\nuniform float u_atmosphereMieAnisotropy;\\n\\\nuniform vec3 u_atmosphereRayleighCoefficient;\\n\\\nuniform vec3 u_atmosphereMieCoefficient;\\n\\\n\\n\\\nconst float ATMOSPHERE_THICKNESS = 111e3; // The thickness of the atmosphere in meters.\\n\\\nconst int PRIMARY_STEPS = 16; // Number of times the ray from the camera to the world position (primary ray) is sampled.\\n\\\nconst int LIGHT_STEPS = 4; // Number of times the light is sampled from the light source's intersection with the atmosphere to a sample position on the primary ray.\\n\\\n\\n\\\n/**\\n\\\n * This function computes the colors contributed by Rayliegh and Mie scattering on a given ray, as well as\\n\\\n * the transmittance value for the ray.\\n\\\n *\\n\\\n * @param {czm_ray} primaryRay The ray from the camera to the position.\\n\\\n * @param {float} primaryRayLength The length of the primary ray.\\n\\\n * @param {vec3} lightDirection The direction of the light to calculate the scattering from.\\n\\\n * @param {vec3} rayleighColor The variable the Rayleigh scattering will be written to.\\n\\\n * @param {vec3} mieColor The variable the Mie scattering will be written to.\\n\\\n * @param {float} opacity The variable the transmittance will be written to.\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvoid computeScattering(\\n\\\n    czm_ray primaryRay,\\n\\\n    float primaryRayLength,\\n\\\n    vec3 lightDirection,\\n\\\n    float atmosphereInnerRadius,\\n\\\n    out vec3 rayleighColor,\\n\\\n    out vec3 mieColor,\\n\\\n    out float opacity\\n\\\n) {\\n\\\n\\n\\\n    // Initialize the default scattering amounts to 0.\\n\\\n    rayleighColor = vec3(0.0);\\n\\\n    mieColor = vec3(0.0);\\n\\\n    opacity = 0.0;\\n\\\n\\n\\\n    float atmosphereOuterRadius = atmosphereInnerRadius + ATMOSPHERE_THICKNESS;\\n\\\n\\n\\\n    vec3 origin = vec3(0.0);\\n\\\n\\n\\\n    // Calculate intersection from the camera to the outer ring of the atmosphere.\\n\\\n    czm_raySegment primaryRayAtmosphereIntersect = czm_raySphereIntersectionInterval(primaryRay, origin, atmosphereOuterRadius);\\n\\\n\\n\\\n    // Return empty colors if no intersection with the atmosphere geometry.\\n\\\n    if (primaryRayAtmosphereIntersect == czm_emptyRaySegment) {\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n    // The ray should start from the first intersection with the outer atmopshere, or from the camera position, if it is inside the atmosphere.\\n\\\n    primaryRayAtmosphereIntersect.start = max(primaryRayAtmosphereIntersect.start, 0.0);\\n\\\n    // The ray should end at the exit from the atmosphere or at the distance to the vertex, whichever is smaller.\\n\\\n    primaryRayAtmosphereIntersect.stop = min(primaryRayAtmosphereIntersect.stop, length(primaryRayLength));\\n\\\n\\n\\\n    // Setup for sampling positions along the ray - starting from the intersection with the outer ring of the atmosphere.\\n\\\n    float rayStepLength = (primaryRayAtmosphereIntersect.stop - primaryRayAtmosphereIntersect.start) / float(PRIMARY_STEPS);\\n\\\n    float rayPositionLength = primaryRayAtmosphereIntersect.start;\\n\\\n\\n\\\n    vec3 rayleighAccumulation = vec3(0.0);\\n\\\n    vec3 mieAccumulation = vec3(0.0);\\n\\\n    vec2 opticalDepth = vec2(0.0);\\n\\\n    vec2 heightScale = vec2(u_atmosphereRayleighScaleHeight, u_atmosphereMieScaleHeight);\\n\\\n\\n\\\n    // Sample positions on the primary ray.\\n\\\n    for (int i = 0; i < PRIMARY_STEPS; i++) {\\n\\\n        // Calculate sample position along viewpoint ray.\\n\\\n        vec3 samplePosition = primaryRay.origin + primaryRay.direction * (rayPositionLength + rayStepLength);\\n\\\n        \\n\\\n        // Calculate height of sample position above ellipsoid.\\n\\\n        float sampleHeight = length(samplePosition) - atmosphereInnerRadius;\\n\\\n\\n\\\n        // Calculate and accumulate density of particles at the sample position.\\n\\\n        vec2 sampleDensity = exp(-sampleHeight / heightScale) * rayStepLength;\\n\\\n        opticalDepth += sampleDensity;\\n\\\n\\n\\\n        // Generate ray from the sample position segment to the light source, up to the outer ring of the atmosphere.\\n\\\n        czm_ray lightRay = czm_ray(samplePosition, lightDirection);\\n\\\n        czm_raySegment lightRayAtmosphereIntersect = czm_raySphereIntersectionInterval(lightRay, origin, atmosphereOuterRadius);\\n\\\n        \\n\\\n        float lightStepLength = lightRayAtmosphereIntersect.stop / float(LIGHT_STEPS);\\n\\\n        float lightPositionLength = 0.0;\\n\\\n\\n\\\n        vec2 lightOpticalDepth = vec2(0.0);\\n\\\n\\n\\\n        // Sample positions along the light ray, to accumulate incidence of light on the latest sample segment.\\n\\\n        for (int j = 0; j < LIGHT_STEPS; j++) {\\n\\\n\\n\\\n            // Calculate sample position along light ray.\\n\\\n            vec3 lightPosition = samplePosition + lightDirection * (lightPositionLength + lightStepLength * 0.5);\\n\\\n\\n\\\n            // Calculate height of the light sample position above ellipsoid.\\n\\\n            float lightHeight = length(lightPosition) - atmosphereInnerRadius;\\n\\\n\\n\\\n            // Calculate density of photons at the light sample position.\\n\\\n            lightOpticalDepth += exp(-lightHeight / heightScale) * lightStepLength;\\n\\\n\\n\\\n            // Increment distance on light ray.\\n\\\n            lightPositionLength += lightStepLength;\\n\\\n        }\\n\\\n\\n\\\n        // Compute attenuation via the primary ray and the light ray.\\n\\\n        vec3 attenuation = exp(-((u_atmosphereMieCoefficient * (opticalDepth.y + lightOpticalDepth.y)) + (u_atmosphereRayleighCoefficient * (opticalDepth.x + lightOpticalDepth.x))));\\n\\\n\\n\\\n        // Accumulate the scattering.\\n\\\n        rayleighAccumulation += sampleDensity.x * attenuation;\\n\\\n        mieAccumulation += sampleDensity.y * attenuation;\\n\\\n\\n\\\n        // Increment distance on primary ray.\\n\\\n        rayPositionLength += rayStepLength;\\n\\\n    }\\n\\\n\\n\\\n    // Compute the scattering amount.\\n\\\n    rayleighColor = u_atmosphereRayleighCoefficient * rayleighAccumulation;\\n\\\n    mieColor = u_atmosphereMieCoefficient * mieAccumulation;\\n\\\n\\n\\\n    // Compute the transmittance i.e. how much light is passing through the atmosphere.\\n\\\n    opacity = length(exp(-((u_atmosphereMieCoefficient * opticalDepth.y) + (u_atmosphereRayleighCoefficient * opticalDepth.x))));\\n\\\n}\\n\\\n\\n\\\nvec4 computeAtmosphereColor(\\n\\\n    vec3 positionWC,\\n\\\n    vec3 lightDirection,\\n\\\n    vec3 rayleighColor,\\n\\\n    vec3 mieColor,\\n\\\n    float opacity\\n\\\n) {\\n\\\n    // Setup the primary ray: from the camera position to the vertex position.\\n\\\n    vec3 cameraToPositionWC = positionWC - czm_viewerPositionWC;\\n\\\n    vec3 cameraToPositionWCDirection = normalize(cameraToPositionWC);\\n\\\n\\n\\\n    float cosAngle = dot(cameraToPositionWCDirection, lightDirection);\\n\\\n    float cosAngleSq = cosAngle * cosAngle;\\n\\\n\\n\\\n    float G = u_atmosphereMieAnisotropy;\\n\\\n    float GSq = G * G;\\n\\\n\\n\\\n    // The Rayleigh phase function.\\n\\\n    float rayleighPhase = 3.0 / (50.2654824574) * (1.0 + cosAngleSq);\\n\\\n    // The Mie phase function.\\n\\\n    float miePhase = 3.0 / (25.1327412287) * ((1.0 - GSq) * (cosAngleSq + 1.0)) / (pow(1.0 + GSq - 2.0 * cosAngle * G, 1.5) * (2.0 + GSq));\\n\\\n\\n\\\n    // The final color is generated by combining the effects of the Rayleigh and Mie scattering.\\n\\\n    vec3 rayleigh = rayleighPhase * rayleighColor;\\n\\\n    vec3 mie = miePhase * mieColor;\\n\\\n\\n\\\n    vec3 color = (rayleigh + mie) * u_atmosphereLightIntensity;\\n\\\n\\n\\\n    return vec4(color, opacity);\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":4},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":1,"column":0},"name":"_default"},{"generated":{"line":8,"column":12},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":2,"column":15}},{"generated":{"line":9,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":4,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":5,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":7,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":8,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":9,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":10,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":11,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":12,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":13,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":14,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":15,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":16,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":17,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":18,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":19,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":20,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":21,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":22,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":23,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":24,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":25,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":26,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":27,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":28,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":29,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":30,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":31,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":32,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":33,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":34,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":35,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":36,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":37,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":38,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":39,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":40,"column":0}},{"generated":{"line":47,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":41,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":42,"column":0}},{"generated":{"line":49,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":43,"column":0}},{"generated":{"line":50,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":44,"column":0}},{"generated":{"line":51,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":45,"column":0}},{"generated":{"line":52,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":46,"column":0}},{"generated":{"line":53,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":47,"column":0}},{"generated":{"line":54,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":48,"column":0}},{"generated":{"line":55,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":49,"column":0}},{"generated":{"line":56,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":50,"column":0}},{"generated":{"line":57,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":51,"column":0}},{"generated":{"line":58,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":52,"column":0}},{"generated":{"line":59,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":53,"column":0}},{"generated":{"line":60,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":54,"column":0}},{"generated":{"line":61,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":55,"column":0}},{"generated":{"line":62,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":56,"column":0}},{"generated":{"line":63,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":57,"column":0}},{"generated":{"line":64,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":58,"column":0}},{"generated":{"line":65,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":59,"column":0}},{"generated":{"line":66,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":60,"column":0}},{"generated":{"line":67,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":61,"column":0}},{"generated":{"line":68,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":62,"column":0}},{"generated":{"line":69,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":63,"column":0}},{"generated":{"line":70,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":64,"column":0}},{"generated":{"line":71,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":65,"column":0}},{"generated":{"line":72,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":66,"column":0}},{"generated":{"line":73,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":67,"column":0}},{"generated":{"line":74,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":68,"column":0}},{"generated":{"line":75,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":69,"column":0}},{"generated":{"line":76,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":70,"column":0}},{"generated":{"line":77,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":71,"column":0}},{"generated":{"line":78,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":72,"column":0}},{"generated":{"line":79,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":73,"column":0}},{"generated":{"line":80,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":74,"column":0}},{"generated":{"line":81,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":75,"column":0}},{"generated":{"line":82,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":76,"column":0}},{"generated":{"line":83,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":77,"column":0}},{"generated":{"line":84,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":78,"column":0}},{"generated":{"line":85,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":79,"column":0}},{"generated":{"line":86,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":80,"column":0}},{"generated":{"line":87,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":81,"column":0}},{"generated":{"line":88,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":82,"column":0}},{"generated":{"line":89,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":83,"column":0}},{"generated":{"line":90,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":84,"column":0}},{"generated":{"line":91,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":85,"column":0}},{"generated":{"line":92,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":86,"column":0}},{"generated":{"line":93,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":87,"column":0}},{"generated":{"line":94,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":88,"column":0}},{"generated":{"line":95,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":89,"column":0}},{"generated":{"line":96,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":90,"column":0}},{"generated":{"line":97,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":91,"column":0}},{"generated":{"line":98,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":92,"column":0}},{"generated":{"line":99,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":93,"column":0}},{"generated":{"line":100,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":94,"column":0}},{"generated":{"line":101,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":95,"column":0}},{"generated":{"line":102,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":96,"column":0}},{"generated":{"line":103,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":97,"column":0}},{"generated":{"line":104,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":98,"column":0}},{"generated":{"line":105,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":99,"column":0}},{"generated":{"line":106,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":100,"column":0}},{"generated":{"line":107,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":101,"column":0}},{"generated":{"line":108,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":102,"column":0}},{"generated":{"line":109,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":103,"column":0}},{"generated":{"line":110,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":104,"column":0}},{"generated":{"line":111,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":105,"column":0}},{"generated":{"line":112,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":106,"column":0}},{"generated":{"line":113,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":107,"column":0}},{"generated":{"line":114,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":108,"column":0}},{"generated":{"line":115,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":109,"column":0}},{"generated":{"line":116,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":110,"column":0}},{"generated":{"line":117,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":111,"column":0}},{"generated":{"line":118,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":112,"column":0}},{"generated":{"line":119,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":113,"column":0}},{"generated":{"line":120,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":114,"column":0}},{"generated":{"line":121,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":115,"column":0}},{"generated":{"line":122,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":116,"column":0}},{"generated":{"line":123,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":117,"column":0}},{"generated":{"line":124,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":118,"column":0}},{"generated":{"line":125,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":119,"column":0}},{"generated":{"line":126,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":120,"column":0}},{"generated":{"line":127,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":121,"column":0}},{"generated":{"line":128,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":122,"column":0}},{"generated":{"line":129,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":123,"column":0}},{"generated":{"line":130,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":124,"column":0}},{"generated":{"line":131,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":125,"column":0}},{"generated":{"line":132,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":126,"column":0}},{"generated":{"line":133,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":127,"column":0}},{"generated":{"line":134,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":128,"column":0}},{"generated":{"line":135,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":129,"column":0}},{"generated":{"line":136,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":130,"column":0}},{"generated":{"line":137,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":131,"column":0}},{"generated":{"line":138,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":132,"column":0}},{"generated":{"line":139,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":133,"column":0}},{"generated":{"line":140,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":134,"column":0}},{"generated":{"line":141,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":135,"column":0}},{"generated":{"line":142,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":136,"column":0}},{"generated":{"line":143,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":137,"column":0}},{"generated":{"line":144,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":138,"column":0}},{"generated":{"line":145,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":139,"column":0}},{"generated":{"line":146,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":140,"column":0}},{"generated":{"line":147,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":141,"column":0}},{"generated":{"line":148,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":142,"column":0}},{"generated":{"line":149,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":143,"column":0}},{"generated":{"line":150,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":144,"column":0}},{"generated":{"line":151,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":145,"column":0}},{"generated":{"line":152,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":146,"column":0}},{"generated":{"line":153,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":147,"column":0}},{"generated":{"line":154,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":148,"column":0}},{"generated":{"line":155,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":149,"column":0}},{"generated":{"line":156,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":150,"column":0}},{"generated":{"line":157,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":151,"column":0}},{"generated":{"line":158,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":152,"column":0}},{"generated":{"line":159,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":153,"column":0}},{"generated":{"line":160,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":154,"column":0}},{"generated":{"line":160,"column":1},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":154,"column":1}},{"generated":{"line":161,"column":0},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":154,"column":1},"name":"exports"},{"generated":{"line":161,"column":7},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":154,"column":1}},{"generated":{"line":161,"column":8},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":154,"column":1},"name":"default"},{"generated":{"line":161,"column":15},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":154,"column":1}},{"generated":{"line":161,"column":18},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":154,"column":1},"name":"_default"},{"generated":{"line":161,"column":26},"source":"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js","original":{"line":154,"column":1}}],"sources":{"node_modules/@cesium/engine/Source/Shaders/AtmosphereCommon.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec3 u_radiiAndDynamicAtmosphereColor;\\n\\\n\\n\\\nuniform float u_atmosphereLightIntensity;\\n\\\nuniform float u_atmosphereRayleighScaleHeight;\\n\\\nuniform float u_atmosphereMieScaleHeight;\\n\\\nuniform float u_atmosphereMieAnisotropy;\\n\\\nuniform vec3 u_atmosphereRayleighCoefficient;\\n\\\nuniform vec3 u_atmosphereMieCoefficient;\\n\\\n\\n\\\nconst float ATMOSPHERE_THICKNESS = 111e3; // The thickness of the atmosphere in meters.\\n\\\nconst int PRIMARY_STEPS = 16; // Number of times the ray from the camera to the world position (primary ray) is sampled.\\n\\\nconst int LIGHT_STEPS = 4; // Number of times the light is sampled from the light source's intersection with the atmosphere to a sample position on the primary ray.\\n\\\n\\n\\\n/**\\n\\\n * This function computes the colors contributed by Rayliegh and Mie scattering on a given ray, as well as\\n\\\n * the transmittance value for the ray.\\n\\\n *\\n\\\n * @param {czm_ray} primaryRay The ray from the camera to the position.\\n\\\n * @param {float} primaryRayLength The length of the primary ray.\\n\\\n * @param {vec3} lightDirection The direction of the light to calculate the scattering from.\\n\\\n * @param {vec3} rayleighColor The variable the Rayleigh scattering will be written to.\\n\\\n * @param {vec3} mieColor The variable the Mie scattering will be written to.\\n\\\n * @param {float} opacity The variable the transmittance will be written to.\\n\\\n * @glslFunction\\n\\\n */\\n\\\nvoid computeScattering(\\n\\\n    czm_ray primaryRay,\\n\\\n    float primaryRayLength,\\n\\\n    vec3 lightDirection,\\n\\\n    float atmosphereInnerRadius,\\n\\\n    out vec3 rayleighColor,\\n\\\n    out vec3 mieColor,\\n\\\n    out float opacity\\n\\\n) {\\n\\\n\\n\\\n    // Initialize the default scattering amounts to 0.\\n\\\n    rayleighColor = vec3(0.0);\\n\\\n    mieColor = vec3(0.0);\\n\\\n    opacity = 0.0;\\n\\\n\\n\\\n    float atmosphereOuterRadius = atmosphereInnerRadius + ATMOSPHERE_THICKNESS;\\n\\\n\\n\\\n    vec3 origin = vec3(0.0);\\n\\\n\\n\\\n    // Calculate intersection from the camera to the outer ring of the atmosphere.\\n\\\n    czm_raySegment primaryRayAtmosphereIntersect = czm_raySphereIntersectionInterval(primaryRay, origin, atmosphereOuterRadius);\\n\\\n\\n\\\n    // Return empty colors if no intersection with the atmosphere geometry.\\n\\\n    if (primaryRayAtmosphereIntersect == czm_emptyRaySegment) {\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n    // The ray should start from the first intersection with the outer atmopshere, or from the camera position, if it is inside the atmosphere.\\n\\\n    primaryRayAtmosphereIntersect.start = max(primaryRayAtmosphereIntersect.start, 0.0);\\n\\\n    // The ray should end at the exit from the atmosphere or at the distance to the vertex, whichever is smaller.\\n\\\n    primaryRayAtmosphereIntersect.stop = min(primaryRayAtmosphereIntersect.stop, length(primaryRayLength));\\n\\\n\\n\\\n    // Setup for sampling positions along the ray - starting from the intersection with the outer ring of the atmosphere.\\n\\\n    float rayStepLength = (primaryRayAtmosphereIntersect.stop - primaryRayAtmosphereIntersect.start) / float(PRIMARY_STEPS);\\n\\\n    float rayPositionLength = primaryRayAtmosphereIntersect.start;\\n\\\n\\n\\\n    vec3 rayleighAccumulation = vec3(0.0);\\n\\\n    vec3 mieAccumulation = vec3(0.0);\\n\\\n    vec2 opticalDepth = vec2(0.0);\\n\\\n    vec2 heightScale = vec2(u_atmosphereRayleighScaleHeight, u_atmosphereMieScaleHeight);\\n\\\n\\n\\\n    // Sample positions on the primary ray.\\n\\\n    for (int i = 0; i < PRIMARY_STEPS; i++) {\\n\\\n        // Calculate sample position along viewpoint ray.\\n\\\n        vec3 samplePosition = primaryRay.origin + primaryRay.direction * (rayPositionLength + rayStepLength);\\n\\\n        \\n\\\n        // Calculate height of sample position above ellipsoid.\\n\\\n        float sampleHeight = length(samplePosition) - atmosphereInnerRadius;\\n\\\n\\n\\\n        // Calculate and accumulate density of particles at the sample position.\\n\\\n        vec2 sampleDensity = exp(-sampleHeight / heightScale) * rayStepLength;\\n\\\n        opticalDepth += sampleDensity;\\n\\\n\\n\\\n        // Generate ray from the sample position segment to the light source, up to the outer ring of the atmosphere.\\n\\\n        czm_ray lightRay = czm_ray(samplePosition, lightDirection);\\n\\\n        czm_raySegment lightRayAtmosphereIntersect = czm_raySphereIntersectionInterval(lightRay, origin, atmosphereOuterRadius);\\n\\\n        \\n\\\n        float lightStepLength = lightRayAtmosphereIntersect.stop / float(LIGHT_STEPS);\\n\\\n        float lightPositionLength = 0.0;\\n\\\n\\n\\\n        vec2 lightOpticalDepth = vec2(0.0);\\n\\\n\\n\\\n        // Sample positions along the light ray, to accumulate incidence of light on the latest sample segment.\\n\\\n        for (int j = 0; j < LIGHT_STEPS; j++) {\\n\\\n\\n\\\n            // Calculate sample position along light ray.\\n\\\n            vec3 lightPosition = samplePosition + lightDirection * (lightPositionLength + lightStepLength * 0.5);\\n\\\n\\n\\\n            // Calculate height of the light sample position above ellipsoid.\\n\\\n            float lightHeight = length(lightPosition) - atmosphereInnerRadius;\\n\\\n\\n\\\n            // Calculate density of photons at the light sample position.\\n\\\n            lightOpticalDepth += exp(-lightHeight / heightScale) * lightStepLength;\\n\\\n\\n\\\n            // Increment distance on light ray.\\n\\\n            lightPositionLength += lightStepLength;\\n\\\n        }\\n\\\n\\n\\\n        // Compute attenuation via the primary ray and the light ray.\\n\\\n        vec3 attenuation = exp(-((u_atmosphereMieCoefficient * (opticalDepth.y + lightOpticalDepth.y)) + (u_atmosphereRayleighCoefficient * (opticalDepth.x + lightOpticalDepth.x))));\\n\\\n\\n\\\n        // Accumulate the scattering.\\n\\\n        rayleighAccumulation += sampleDensity.x * attenuation;\\n\\\n        mieAccumulation += sampleDensity.y * attenuation;\\n\\\n\\n\\\n        // Increment distance on primary ray.\\n\\\n        rayPositionLength += rayStepLength;\\n\\\n    }\\n\\\n\\n\\\n    // Compute the scattering amount.\\n\\\n    rayleighColor = u_atmosphereRayleighCoefficient * rayleighAccumulation;\\n\\\n    mieColor = u_atmosphereMieCoefficient * mieAccumulation;\\n\\\n\\n\\\n    // Compute the transmittance i.e. how much light is passing through the atmosphere.\\n\\\n    opacity = length(exp(-((u_atmosphereMieCoefficient * opticalDepth.y) + (u_atmosphereRayleighCoefficient * opticalDepth.x))));\\n\\\n}\\n\\\n\\n\\\nvec4 computeAtmosphereColor(\\n\\\n    vec3 positionWC,\\n\\\n    vec3 lightDirection,\\n\\\n    vec3 rayleighColor,\\n\\\n    vec3 mieColor,\\n\\\n    float opacity\\n\\\n) {\\n\\\n    // Setup the primary ray: from the camera position to the vertex position.\\n\\\n    vec3 cameraToPositionWC = positionWC - czm_viewerPositionWC;\\n\\\n    vec3 cameraToPositionWCDirection = normalize(cameraToPositionWC);\\n\\\n\\n\\\n    float cosAngle = dot(cameraToPositionWCDirection, lightDirection);\\n\\\n    float cosAngleSq = cosAngle * cosAngle;\\n\\\n\\n\\\n    float G = u_atmosphereMieAnisotropy;\\n\\\n    float GSq = G * G;\\n\\\n\\n\\\n    // The Rayleigh phase function.\\n\\\n    float rayleighPhase = 3.0 / (50.2654824574) * (1.0 + cosAngleSq);\\n\\\n    // The Mie phase function.\\n\\\n    float miePhase = 3.0 / (25.1327412287) * ((1.0 - GSq) * (cosAngleSq + 1.0)) / (pow(1.0 + GSq - 2.0 * cosAngle * G, 1.5) * (2.0 + GSq));\\n\\\n\\n\\\n    // The final color is generated by combining the effects of the Rayleigh and Mie scattering.\\n\\\n    vec3 rayleigh = rayleighPhase * rayleighColor;\\n\\\n    vec3 mie = miePhase * mieColor;\\n\\\n\\n\\\n    vec3 color = (rayleigh + mie) * u_atmosphereLightIntensity;\\n\\\n\\n\\\n    return vec4(color, opacity);\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"78a433b8ac36119cd6866e80f780e7fe","cacheData":{"env":{}}}